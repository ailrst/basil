/* File generated by the BNF Converter (bnfc 2.9.5). */

/************************* Compiler Front-End Test *************************/
/*                                                                         */
/*  This test will parse a file, print the abstract syntax tree, and then  */
/*  pretty-print the result.                                               */
/*                                                                         */
/***************************************************************************/

#include <cstdio>
#include <string>
#include <iostream>
#include "cpp/Parser.H"
#include "cpp/Printer.H"
#include "cpp/Absyn.H"
#include "cpp/ParserError.H"
#include "desugar.hpp"

void usage() {
  printf("usage: Call with one of the following argument combinations:\n");
  printf("\t--help\t\tDisplay this help message.\n");
  printf("\t(no arguments)\tParse stdin verbosely.\n");
  printf("\t(files)\t\tParse content of files verbosely.\n");
  printf("\t-s (files)\tSilent mode. Parse content of files silently.\n");
}

int main(int argc, char ** argv)
{
  FILE *input;
  int quiet = 0;
  char *filename = NULL;

  if (argc > 1) {
    if (strcmp(argv[1], "-s") == 0) {
      quiet = 1;
      if (argc > 2) {
        filename = argv[2];
      } else {
        input = stdin;
      }
    } else {
      filename = argv[1];
    }
  }

  if (filename) {
    input = fopen(filename, "r");
    if (!input) {
      usage();
      exit(1);
    }
  } else input = stdin;
  /* The default entry point is used. For other options see Parser.H */
  Program *parse_tree = NULL;
  try {
  parse_tree = pProgram(input);
  } catch( parse_error &e) {
     std::cerr << "Parse error on line " << e.getLine() << "\n";
  }
  if (parse_tree)
  {

    auto orig = fopen("original.il", "w");
    auto normed = fopen("normalised.il", "w");

    printf("\nParse Successful!\n");
    PrintAbsyn *p = new PrintAbsyn();
    fprintf(orig, "%s\n\n", p->print(parse_tree));

    auto normify = new Normaliser();
    parse_tree->accept(normify);

    delete p;
    p = new PrintAbsyn();

    fprintf(normed, "%s\n\n", p->print(parse_tree));

    fclose(orig);
    fclose(normed);
    delete(normify);
    delete(parse_tree);
    return 0;
  }
  return 1;
}


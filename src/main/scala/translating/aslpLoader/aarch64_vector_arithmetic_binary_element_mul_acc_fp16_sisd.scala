/* AUTO-GENERATED ASLp LIFTER FILE */
package aslloader
import util.Logger
import ir._

def f_aarch64_vector_arithmetic_binary_element_mul_acc_fp16_sisd (v_st: LiftState,v_enc: BitVecLiteral) : Unit = {
  if (f_eq_bits(v_st, BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), BitVecLiteral(BigInt("1", 2), 1))) then {
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    assert (((f_sle_bits(v_st, BigInt(5), BitVecLiteral(BigInt("00000", 2), 5), f_ZeroExtend(v_st, BigInt(4), BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(4)), BigInt(5)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(4), BigInt(6), bvextract(v_st,v_enc,BigInt(16),BigInt(4)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    val v_result__1 : RTSym = f_decl_bv(v_st, "result__1", BigInt(16)) 
    assert (((f_sle_bits(v_st, BigInt(4), BitVecLiteral(BigInt("0000", 2), 4), f_ZeroExtend(v_st, BigInt(3), BigInt(4), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(4)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(8), BigInt(9), f_add_bits(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)), BitVecLiteral(BigInt("00010000", 2), 8)), BigInt(9)), BitVecLiteral(BigInt("010000000", 2), 9)))))
    if (f_eq_bits(v_st, BigInt(1), bvextract(v_st,v_enc,BigInt(14),BigInt(1)), BitVecLiteral(BigInt("1", 2), 1))) then {
      val v_Exp22__2 : RTSym = f_decl_bv(v_st, "Exp22__2", BigInt(16)) 
      f_gen_store (v_st,v_Exp22__2,f_gen_FPMulAdd(v_st, BigInt(16), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_append_bits(v_st, BigInt(1), BigInt(15), f_gen_not_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(15), BigInt(1))), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(15))), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(4), bvextract(v_st,v_enc,BigInt(16),BigInt(4)))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_load(v_st, v_FPCR.v)))
      f_gen_store (v_st,v_result__1,f_gen_load(v_st, v_Exp22__2))
    } else {
      val v_Exp27__2 : RTSym = f_decl_bv(v_st, "Exp27__2", BigInt(16)) 
      f_gen_store (v_st,v_Exp27__2,f_gen_FPMulAdd(v_st, BigInt(16), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(4), bvextract(v_st,v_enc,BigInt(16),BigInt(4)))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_load(v_st, v_FPCR.v)))
      f_gen_store (v_st,v_result__1,f_gen_load(v_st, v_Exp27__2))
    }
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_ZeroExtend(v_st, BigInt(16), BigInt(128), f_gen_load(v_st, v_result__1), f_gen_int_lit(v_st, BigInt(128))))
  } else {
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    assert (((f_sle_bits(v_st, BigInt(5), BitVecLiteral(BigInt("00000", 2), 5), f_ZeroExtend(v_st, BigInt(4), BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(4)), BigInt(5)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(4), BigInt(6), bvextract(v_st,v_enc,BigInt(16),BigInt(4)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    val v_result__1 : RTSym = f_decl_bv(v_st, "result__1", BigInt(16)) 
    assert (((f_sle_bits(v_st, BigInt(4), BitVecLiteral(BigInt("0000", 2), 4), f_ZeroExtend(v_st, BigInt(3), BigInt(4), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(4)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(8), BigInt(9), f_add_bits(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)), BitVecLiteral(BigInt("00010000", 2), 8)), BigInt(9)), BitVecLiteral(BigInt("001000000", 2), 9)))))
    if (f_eq_bits(v_st, BigInt(1), bvextract(v_st,v_enc,BigInt(14),BigInt(1)), BitVecLiteral(BigInt("1", 2), 1))) then {
      val v_Exp55__2 : RTSym = f_decl_bv(v_st, "Exp55__2", BigInt(16)) 
      f_gen_store (v_st,v_Exp55__2,f_gen_FPMulAdd(v_st, BigInt(16), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_append_bits(v_st, BigInt(1), BigInt(15), f_gen_not_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(15), BigInt(1))), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(15))), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(64), BigInt(8), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(4), bvextract(v_st,v_enc,BigInt(16),BigInt(4)))), BigInt(0), BigInt(64)), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_load(v_st, v_FPCR.v)))
      f_gen_store (v_st,v_result__1,f_gen_load(v_st, v_Exp55__2))
    } else {
      val v_Exp60__2 : RTSym = f_decl_bv(v_st, "Exp60__2", BigInt(16)) 
      f_gen_store (v_st,v_Exp60__2,f_gen_FPMulAdd(v_st, BigInt(16), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(64), BigInt(8), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(4), bvextract(v_st,v_enc,BigInt(16),BigInt(4)))), BigInt(0), BigInt(64)), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_load(v_st, v_FPCR.v)))
      f_gen_store (v_st,v_result__1,f_gen_load(v_st, v_Exp60__2))
    }
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_ZeroExtend(v_st, BigInt(16), BigInt(128), f_gen_load(v_st, v_result__1), f_gen_int_lit(v_st, BigInt(128))))
  }
}

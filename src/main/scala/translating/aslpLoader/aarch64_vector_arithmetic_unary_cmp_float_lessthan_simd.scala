/* AUTO-GENERATED ASLp LIFTER FILE */
package aslloader
import util.Logger
import ir._

def f_aarch64_vector_arithmetic_unary_cmp_float_lessthan_simd (v_st: LiftState,v_enc: BV) : Unit = {
  if (f_eq_bits(v_st, BigInt(2), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(22),BigInt(1)), bvextract(v_st,v_enc,BigInt(30),BigInt(1))), mkBits(v_st, 2, BigInt("10", 2)))) then {
    throw Exception("not supported")
  } else {
    if (f_eq_bits(v_st, BigInt(1), mkBits(v_st, 1, BigInt("0", 2)), bvextract(v_st,v_enc,BigInt(22),BigInt(1)))) then {
      if (f_eq_bits(v_st, BigInt(1), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), mkBits(v_st, 1, BigInt("1", 2)))) then {
        assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
        val v_Exp6__2 = Mutable[Expr](rTExprDefault)
        v_Exp6__2.v = f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5))))
        val v_Exp12__2 = Mutable[Expr](rTExprDefault)
        v_Exp12__2.v = f_gen_FPCompareGT(v_st, BigInt(32), f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(32)), f_gen_load(v_st, v_FPCR.v))
        val v_If14__1 : RTSym = f_decl_bv(v_st, "If14__1", BigInt(32)) 
        val v_temp0 : RTLabel = f_gen_branch(v_st, v_Exp12__2.v) 
        f_switch_context (v_st,f_true_branch(v_st, v_temp0))
        f_gen_store (v_st,v_If14__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
        f_switch_context (v_st,f_false_branch(v_st, v_temp0))
        f_gen_store (v_st,v_If14__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))))
        f_switch_context (v_st,f_merge_branch(v_st, v_temp0))
        val v_Exp19__2 = Mutable[Expr](rTExprDefault)
        v_Exp19__2.v = f_gen_FPCompareGT(v_st, BigInt(32), f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(32), BigInt(32)), f_gen_load(v_st, v_FPCR.v))
        val v_If20__1 : RTSym = f_decl_bv(v_st, "If20__1", BigInt(32)) 
        val v_temp1 : RTLabel = f_gen_branch(v_st, v_Exp19__2.v) 
        f_switch_context (v_st,f_true_branch(v_st, v_temp1))
        f_gen_store (v_st,v_If20__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
        f_switch_context (v_st,f_false_branch(v_st, v_temp1))
        f_gen_store (v_st,v_If20__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))))
        f_switch_context (v_st,f_merge_branch(v_st, v_temp1))
        val v_Exp25__2 = Mutable[Expr](rTExprDefault)
        v_Exp25__2.v = f_gen_FPCompareGT(v_st, BigInt(32), f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(64), BigInt(32)), f_gen_load(v_st, v_FPCR.v))
        val v_If26__1 : RTSym = f_decl_bv(v_st, "If26__1", BigInt(32)) 
        val v_temp2 : RTLabel = f_gen_branch(v_st, v_Exp25__2.v) 
        f_switch_context (v_st,f_true_branch(v_st, v_temp2))
        f_gen_store (v_st,v_If26__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
        f_switch_context (v_st,f_false_branch(v_st, v_temp2))
        f_gen_store (v_st,v_If26__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))))
        f_switch_context (v_st,f_merge_branch(v_st, v_temp2))
        val v_Exp31__2 = Mutable[Expr](rTExprDefault)
        v_Exp31__2.v = f_gen_FPCompareGT(v_st, BigInt(32), f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(96), BigInt(32)), f_gen_load(v_st, v_FPCR.v))
        val v_If32__1 : RTSym = f_decl_bv(v_st, "If32__1", BigInt(32)) 
        val v_temp3 : RTLabel = f_gen_branch(v_st, v_Exp31__2.v) 
        f_switch_context (v_st,f_true_branch(v_st, v_temp3))
        f_gen_store (v_st,v_If32__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
        f_switch_context (v_st,f_false_branch(v_st, v_temp3))
        f_gen_store (v_st,v_If32__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))))
        f_switch_context (v_st,f_merge_branch(v_st, v_temp3))
        assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
        f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_append_bits(v_st, BigInt(32), BigInt(96), f_gen_load(v_st, v_If32__1), f_gen_append_bits(v_st, BigInt(32), BigInt(64), f_gen_load(v_st, v_If26__1), f_gen_append_bits(v_st, BigInt(32), BigInt(32), f_gen_load(v_st, v_If20__1), f_gen_load(v_st, v_If14__1)))))
      } else {
        assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
        val v_Exp43__2 = Mutable[Expr](rTExprDefault)
        v_Exp43__2.v = f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5))))
        val v_Exp49__2 = Mutable[Expr](rTExprDefault)
        v_Exp49__2.v = f_gen_FPCompareGT(v_st, BigInt(32), f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(32)), f_gen_load(v_st, v_FPCR.v))
        val v_If51__1 : RTSym = f_decl_bv(v_st, "If51__1", BigInt(32)) 
        val v_temp4 : RTLabel = f_gen_branch(v_st, v_Exp49__2.v) 
        f_switch_context (v_st,f_true_branch(v_st, v_temp4))
        f_gen_store (v_st,v_If51__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
        f_switch_context (v_st,f_false_branch(v_st, v_temp4))
        f_gen_store (v_st,v_If51__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))))
        f_switch_context (v_st,f_merge_branch(v_st, v_temp4))
        val v_Exp56__2 = Mutable[Expr](rTExprDefault)
        v_Exp56__2.v = f_gen_FPCompareGT(v_st, BigInt(32), f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))), f_gen_slice(v_st, v_Exp43__2.v, BigInt(32), BigInt(32)), f_gen_load(v_st, v_FPCR.v))
        val v_If57__1 : RTSym = f_decl_bv(v_st, "If57__1", BigInt(32)) 
        val v_temp5 : RTLabel = f_gen_branch(v_st, v_Exp56__2.v) 
        f_switch_context (v_st,f_true_branch(v_st, v_temp5))
        f_gen_store (v_st,v_If57__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
        f_switch_context (v_st,f_false_branch(v_st, v_temp5))
        f_gen_store (v_st,v_If57__1,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("00000000000000000000000000000000", 2))))
        f_switch_context (v_st,f_merge_branch(v_st, v_temp5))
        assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
        f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_ZeroExtend(v_st, BigInt(64), BigInt(128), f_gen_append_bits(v_st, BigInt(32), BigInt(32), f_gen_load(v_st, v_If57__1), f_gen_load(v_st, v_If51__1)), f_gen_int_lit(v_st, BigInt(128))))
      }
    } else {
      if (f_eq_bits(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2)), bvextract(v_st,v_enc,BigInt(22),BigInt(1)))) then {
        if (f_eq_bits(v_st, BigInt(1), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), mkBits(v_st, 1, BigInt("1", 2)))) then {
          assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
          val v_Exp69__2 = Mutable[Expr](rTExprDefault)
          v_Exp69__2.v = f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5))))
          val v_Exp75__2 = Mutable[Expr](rTExprDefault)
          v_Exp75__2.v = f_gen_FPCompareGT(v_st, BigInt(64), f_gen_bit_lit(v_st, BigInt(64), mkBits(v_st, 64, BigInt("0000000000000000000000000000000000000000000000000000000000000000", 2))), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(64)), f_gen_load(v_st, v_FPCR.v))
          val v_If77__1 : RTSym = f_decl_bv(v_st, "If77__1", BigInt(64)) 
          val v_temp6 : RTLabel = f_gen_branch(v_st, v_Exp75__2.v) 
          f_switch_context (v_st,f_true_branch(v_st, v_temp6))
          f_gen_store (v_st,v_If77__1,f_gen_bit_lit(v_st, BigInt(64), mkBits(v_st, 64, BigInt("1111111111111111111111111111111111111111111111111111111111111111", 2))))
          f_switch_context (v_st,f_false_branch(v_st, v_temp6))
          f_gen_store (v_st,v_If77__1,f_gen_bit_lit(v_st, BigInt(64), mkBits(v_st, 64, BigInt("0000000000000000000000000000000000000000000000000000000000000000", 2))))
          f_switch_context (v_st,f_merge_branch(v_st, v_temp6))
          val v_Exp82__2 = Mutable[Expr](rTExprDefault)
          v_Exp82__2.v = f_gen_FPCompareGT(v_st, BigInt(64), f_gen_bit_lit(v_st, BigInt(64), mkBits(v_st, 64, BigInt("0000000000000000000000000000000000000000000000000000000000000000", 2))), f_gen_slice(v_st, v_Exp69__2.v, BigInt(64), BigInt(64)), f_gen_load(v_st, v_FPCR.v))
          val v_If83__1 : RTSym = f_decl_bv(v_st, "If83__1", BigInt(64)) 
          val v_temp7 : RTLabel = f_gen_branch(v_st, v_Exp82__2.v) 
          f_switch_context (v_st,f_true_branch(v_st, v_temp7))
          f_gen_store (v_st,v_If83__1,f_gen_bit_lit(v_st, BigInt(64), mkBits(v_st, 64, BigInt("1111111111111111111111111111111111111111111111111111111111111111", 2))))
          f_switch_context (v_st,f_false_branch(v_st, v_temp7))
          f_gen_store (v_st,v_If83__1,f_gen_bit_lit(v_st, BigInt(64), mkBits(v_st, 64, BigInt("0000000000000000000000000000000000000000000000000000000000000000", 2))))
          f_switch_context (v_st,f_merge_branch(v_st, v_temp7))
          assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
          f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_append_bits(v_st, BigInt(64), BigInt(64), f_gen_load(v_st, v_If83__1), f_gen_load(v_st, v_If77__1)))
        } else {
          assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
          val v_Exp100__2 = Mutable[Expr](rTExprDefault)
          v_Exp100__2.v = f_gen_FPCompareGT(v_st, BigInt(64), f_gen_bit_lit(v_st, BigInt(64), mkBits(v_st, 64, BigInt("0000000000000000000000000000000000000000000000000000000000000000", 2))), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(64)), f_gen_load(v_st, v_FPCR.v))
          val v_If102__1 : RTSym = f_decl_bv(v_st, "If102__1", BigInt(64)) 
          val v_temp8 : RTLabel = f_gen_branch(v_st, v_Exp100__2.v) 
          f_switch_context (v_st,f_true_branch(v_st, v_temp8))
          f_gen_store (v_st,v_If102__1,f_gen_bit_lit(v_st, BigInt(64), mkBits(v_st, 64, BigInt("1111111111111111111111111111111111111111111111111111111111111111", 2))))
          f_switch_context (v_st,f_false_branch(v_st, v_temp8))
          f_gen_store (v_st,v_If102__1,f_gen_bit_lit(v_st, BigInt(64), mkBits(v_st, 64, BigInt("0000000000000000000000000000000000000000000000000000000000000000", 2))))
          f_switch_context (v_st,f_merge_branch(v_st, v_temp8))
          assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
          f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_ZeroExtend(v_st, BigInt(64), BigInt(128), f_gen_load(v_st, v_If102__1), f_gen_int_lit(v_st, BigInt(128))))
        }
      } else {
        throw Exception("not supported")
      }
    }
  }
}

/* AUTO-GENERATED ASLp LIFTER FILE */
package aslloader
import util.Logger
import ir._

def f_aarch64_vector_arithmetic_binary_uniform_mul_acc_bf16_long (v_st: LiftState,v_enc: BV) : Unit = {
  assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
  assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(16),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(16),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
  assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
  assert (((f_sle_bits(v_st, BigInt(2), mkBits(v_st, 2, BigInt("00", 2)), f_ZeroExtend(v_st, BigInt(1), BigInt(2), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(2)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(6), BigInt(9), f_add_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(6)), mkBits(v_st, 6, BigInt("010000", 2))), BigInt(9)), mkBits(v_st, 9, BigInt("010000000", 2))))))
  assert (((f_sle_bits(v_st, BigInt(2), mkBits(v_st, 2, BigInt("00", 2)), f_ZeroExtend(v_st, BigInt(1), BigInt(2), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(2)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(6), BigInt(9), f_add_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(6)), mkBits(v_st, 6, BigInt("010000", 2))), BigInt(9)), mkBits(v_st, 9, BigInt("010000000", 2))))))
  val v_Exp25__2 : RTSym = f_decl_bv(v_st, "Exp25__2", BigInt(32)) 
  f_gen_store (v_st,v_Exp25__2,f_gen_FPMulAdd(v_st, BigInt(32), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(0), BigInt(32)), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(6), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(6)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2)))), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(6), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(6)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2)))), f_gen_load(v_st, v_FPCR.v)))
  assert (((f_sle_bits(v_st, BigInt(3), mkBits(v_st, 3, BigInt("000", 2)), f_ZeroExtend(v_st, BigInt(2), BigInt(3), f_add_bits(v_st, BigInt(2), f_ZeroExtend(v_st, BigInt(1), BigInt(2), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(2)), mkBits(v_st, 2, BigInt("10", 2))), BigInt(3)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(7), BigInt(9), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(7)), mkBits(v_st, 7, BigInt("0110000", 2))), BigInt(9)), mkBits(v_st, 9, BigInt("010000000", 2))))))
  assert (((f_sle_bits(v_st, BigInt(3), mkBits(v_st, 3, BigInt("000", 2)), f_ZeroExtend(v_st, BigInt(2), BigInt(3), f_add_bits(v_st, BigInt(2), f_ZeroExtend(v_st, BigInt(1), BigInt(2), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(2)), mkBits(v_st, 2, BigInt("10", 2))), BigInt(3)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(7), BigInt(9), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(7)), mkBits(v_st, 7, BigInt("0110000", 2))), BigInt(9)), mkBits(v_st, 9, BigInt("010000000", 2))))))
  val v_Exp34__2 : RTSym = f_decl_bv(v_st, "Exp34__2", BigInt(32)) 
  f_gen_store (v_st,v_Exp34__2,f_gen_FPMulAdd(v_st, BigInt(32), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(32), BigInt(32)), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(7), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(6), BigInt(7), f_add_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(6)), mkBits(v_st, 6, BigInt("100000", 2))), BigInt(7)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2)))), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(7), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(6), BigInt(7), f_add_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(6)), mkBits(v_st, 6, BigInt("100000", 2))), BigInt(7)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2)))), f_gen_load(v_st, v_FPCR.v)))
  assert (((f_sle_bits(v_st, BigInt(4), mkBits(v_st, 4, BigInt("0000", 2)), f_ZeroExtend(v_st, BigInt(3), BigInt(4), f_add_bits(v_st, BigInt(3), f_ZeroExtend(v_st, BigInt(1), BigInt(3), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(3)), mkBits(v_st, 3, BigInt("100", 2))), BigInt(4)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(7), BigInt(9), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(7)), mkBits(v_st, 7, BigInt("1010000", 2))), BigInt(9)), mkBits(v_st, 9, BigInt("010000000", 2))))))
  assert (((f_sle_bits(v_st, BigInt(4), mkBits(v_st, 4, BigInt("0000", 2)), f_ZeroExtend(v_st, BigInt(3), BigInt(4), f_add_bits(v_st, BigInt(3), f_ZeroExtend(v_st, BigInt(1), BigInt(3), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(3)), mkBits(v_st, 3, BigInt("100", 2))), BigInt(4)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(7), BigInt(9), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(7)), mkBits(v_st, 7, BigInt("1010000", 2))), BigInt(9)), mkBits(v_st, 9, BigInt("010000000", 2))))))
  val v_Exp43__2 : RTSym = f_decl_bv(v_st, "Exp43__2", BigInt(32)) 
  f_gen_store (v_st,v_Exp43__2,f_gen_FPMulAdd(v_st, BigInt(32), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(64), BigInt(32)), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(7)), mkBits(v_st, 7, BigInt("1000000", 2))), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2)))), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(7)), mkBits(v_st, 7, BigInt("1000000", 2))), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2)))), f_gen_load(v_st, v_FPCR.v)))
  assert (((f_sle_bits(v_st, BigInt(4), mkBits(v_st, 4, BigInt("0000", 2)), f_ZeroExtend(v_st, BigInt(3), BigInt(4), f_add_bits(v_st, BigInt(3), f_ZeroExtend(v_st, BigInt(1), BigInt(3), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(3)), mkBits(v_st, 3, BigInt("110", 2))), BigInt(4)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(8), BigInt(9), f_add_bits(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(5), BigInt(8), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(8)), mkBits(v_st, 8, BigInt("01110000", 2))), BigInt(9)), mkBits(v_st, 9, BigInt("010000000", 2))))))
  assert (((f_sle_bits(v_st, BigInt(4), mkBits(v_st, 4, BigInt("0000", 2)), f_ZeroExtend(v_st, BigInt(3), BigInt(4), f_add_bits(v_st, BigInt(3), f_ZeroExtend(v_st, BigInt(1), BigInt(3), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(3)), mkBits(v_st, 3, BigInt("110", 2))), BigInt(4)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(8), BigInt(9), f_add_bits(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(5), BigInt(8), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(8)), mkBits(v_st, 8, BigInt("01110000", 2))), BigInt(9)), mkBits(v_st, 9, BigInt("010000000", 2))))))
  val v_Exp52__2 = Mutable[Expr](rTExprDefault)
  v_Exp52__2.v = f_gen_FPMulAdd(v_st, BigInt(32), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(96), BigInt(32)), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(7)), mkBits(v_st, 7, BigInt("1100000", 2))), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2)))), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), mkBits(v_st, 5, BigInt("10000", 2))), BigInt(7)), mkBits(v_st, 7, BigInt("1100000", 2))), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2)))), f_gen_load(v_st, v_FPCR.v))
  assert (((f_sle_bits(v_st, BigInt(6), mkBits(v_st, 6, BigInt("000000", 2)), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), mkBits(v_st, 6, BigInt("011111", 2))))))
  f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_append_bits(v_st, BigInt(32), BigInt(96), v_Exp52__2.v, f_gen_append_bits(v_st, BigInt(32), BigInt(64), f_gen_load(v_st, v_Exp43__2), f_gen_append_bits(v_st, BigInt(32), BigInt(32), f_gen_load(v_st, v_Exp34__2), f_gen_load(v_st, v_Exp25__2)))))
}

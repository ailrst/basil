/* AUTO-GENERATED ASLp LIFTER FILE */
package aslloader
import util.Logger
import ir._

def f_aarch64_vector_arithmetic_binary_element_mul_acc_bf16_long (v_st: LiftState,v_enc: BitVecLiteral) : Unit = {
  assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
  assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_append_bits(v_st, BigInt(1), BigInt(4), BitVecLiteral(BigInt("0", 2), 1), bvextract(v_st,v_enc,BigInt(16),BigInt(4))), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_append_bits(v_st, BigInt(1), BigInt(4), BitVecLiteral(BigInt("0", 2), 1), bvextract(v_st,v_enc,BigInt(16),BigInt(4))), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
  assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
  assert (((f_sle_bits(v_st, BigInt(4), BitVecLiteral(BigInt("0000", 2), 4), f_ZeroExtend(v_st, BigInt(3), BigInt(4), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(4)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(8), BigInt(9), f_add_bits(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)), BitVecLiteral(BigInt("00010000", 2), 8)), BigInt(9)), BitVecLiteral(BigInt("010000000", 2), 9)))))
  assert (((f_sle_bits(v_st, BigInt(2), BitVecLiteral(BigInt("00", 2), 2), f_ZeroExtend(v_st, BigInt(1), BigInt(2), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(2)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(6), BigInt(9), f_add_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), BitVecLiteral(BigInt("10000", 2), 5)), BigInt(6)), BitVecLiteral(BigInt("010000", 2), 6)), BigInt(9)), BitVecLiteral(BigInt("010000000", 2), 9)))))
  val v_Exp26__2 : RTSym = f_decl_bv(v_st, "Exp26__2", BigInt(32)) 
  f_gen_store (v_st,v_Exp26__2,f_gen_FPMulAdd(v_st, BigInt(32), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(0), BigInt(32)), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(6), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), BitVecLiteral(BigInt("10000", 2), 5)), BigInt(6)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), BitVecLiteral(BigInt("0000000000000000", 2), 16))), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), f_append_bits(v_st, BigInt(1), BigInt(4), BitVecLiteral(BigInt("0", 2), 1), bvextract(v_st,v_enc,BigInt(16),BigInt(4))))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), BitVecLiteral(BigInt("0000000000000000", 2), 16))), f_gen_load(v_st, v_FPCR.v)))
  assert (((f_sle_bits(v_st, BigInt(3), BitVecLiteral(BigInt("000", 2), 3), f_ZeroExtend(v_st, BigInt(2), BigInt(3), f_add_bits(v_st, BigInt(2), f_ZeroExtend(v_st, BigInt(1), BigInt(2), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(2)), BitVecLiteral(BigInt("10", 2), 2)), BigInt(3)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(7), BigInt(9), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), BitVecLiteral(BigInt("10000", 2), 5)), BigInt(7)), BitVecLiteral(BigInt("0110000", 2), 7)), BigInt(9)), BitVecLiteral(BigInt("010000000", 2), 9)))))
  val v_Exp32__2 : RTSym = f_decl_bv(v_st, "Exp32__2", BigInt(32)) 
  f_gen_store (v_st,v_Exp32__2,f_gen_FPMulAdd(v_st, BigInt(32), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(32), BigInt(32)), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(7), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(6), BigInt(7), f_add_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), BitVecLiteral(BigInt("10000", 2), 5)), BigInt(6)), BitVecLiteral(BigInt("100000", 2), 6)), BigInt(7)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), BitVecLiteral(BigInt("0000000000000000", 2), 16))), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), f_append_bits(v_st, BigInt(1), BigInt(4), BitVecLiteral(BigInt("0", 2), 1), bvextract(v_st,v_enc,BigInt(16),BigInt(4))))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), BitVecLiteral(BigInt("0000000000000000", 2), 16))), f_gen_load(v_st, v_FPCR.v)))
  assert (((f_sle_bits(v_st, BigInt(4), BitVecLiteral(BigInt("0000", 2), 4), f_ZeroExtend(v_st, BigInt(3), BigInt(4), f_add_bits(v_st, BigInt(3), f_ZeroExtend(v_st, BigInt(1), BigInt(3), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(3)), BitVecLiteral(BigInt("100", 2), 3)), BigInt(4)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(7), BigInt(9), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), BitVecLiteral(BigInt("10000", 2), 5)), BigInt(7)), BitVecLiteral(BigInt("1010000", 2), 7)), BigInt(9)), BitVecLiteral(BigInt("010000000", 2), 9)))))
  val v_Exp38__2 : RTSym = f_decl_bv(v_st, "Exp38__2", BigInt(32)) 
  f_gen_store (v_st,v_Exp38__2,f_gen_FPMulAdd(v_st, BigInt(32), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(64), BigInt(32)), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), BitVecLiteral(BigInt("10000", 2), 5)), BigInt(7)), BitVecLiteral(BigInt("1000000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), BitVecLiteral(BigInt("0000000000000000", 2), 16))), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), f_append_bits(v_st, BigInt(1), BigInt(4), BitVecLiteral(BigInt("0", 2), 1), bvextract(v_st,v_enc,BigInt(16),BigInt(4))))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), BitVecLiteral(BigInt("0000000000000000", 2), 16))), f_gen_load(v_st, v_FPCR.v)))
  assert (((f_sle_bits(v_st, BigInt(4), BitVecLiteral(BigInt("0000", 2), 4), f_ZeroExtend(v_st, BigInt(3), BigInt(4), f_add_bits(v_st, BigInt(3), f_ZeroExtend(v_st, BigInt(1), BigInt(3), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(3)), BitVecLiteral(BigInt("110", 2), 3)), BigInt(4)))) && (f_sle_bits(v_st, BigInt(9), f_ZeroExtend(v_st, BigInt(8), BigInt(9), f_add_bits(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(5), BigInt(8), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), BitVecLiteral(BigInt("10000", 2), 5)), BigInt(8)), BitVecLiteral(BigInt("01110000", 2), 8)), BigInt(9)), BitVecLiteral(BigInt("010000000", 2), 9)))))
  val v_Exp44__2 : RTSym = f_decl_bv(v_st, "Exp44__2", BigInt(32)) 
  f_gen_store (v_st,v_Exp44__2,f_gen_FPMulAdd(v_st, BigInt(32), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(96), BigInt(32)), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_add_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(5), BigInt(7), f_mul_bits(v_st, BigInt(5), f_ZeroExtend(v_st, BigInt(1), BigInt(5), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BigInt(5)), BitVecLiteral(BigInt("10000", 2), 5)), BigInt(7)), BitVecLiteral(BigInt("1100000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), BitVecLiteral(BigInt("0000000000000000", 2), 16))), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_lsr_bits(v_st, BigInt(128), BigInt(8), f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), f_append_bits(v_st, BigInt(1), BigInt(4), BitVecLiteral(BigInt("0", 2), 1), bvextract(v_st,v_enc,BigInt(16),BigInt(4))))), f_gen_bit_lit(v_st, BigInt(8), f_ZeroExtend(v_st, BigInt(7), BigInt(8), f_mul_bits(v_st, BigInt(7), f_ZeroExtend(v_st, BigInt(3), BigInt(7), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(11),BigInt(1)), bvextract(v_st,v_enc,BigInt(21),BigInt(1))), bvextract(v_st,v_enc,BigInt(20),BigInt(1))), BigInt(7)), BitVecLiteral(BigInt("0010000", 2), 7)), BigInt(8)))), BigInt(0), BigInt(16)), BigInt(0), BigInt(16)), f_gen_bit_lit(v_st, BigInt(16), BitVecLiteral(BigInt("0000000000000000", 2), 16))), f_gen_load(v_st, v_FPCR.v)))
  assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
  f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_append_bits(v_st, BigInt(32), BigInt(96), f_gen_load(v_st, v_Exp44__2), f_gen_append_bits(v_st, BigInt(32), BigInt(64), f_gen_load(v_st, v_Exp38__2), f_gen_append_bits(v_st, BigInt(32), BigInt(32), f_gen_load(v_st, v_Exp32__2), f_gen_load(v_st, v_Exp26__2)))))
}

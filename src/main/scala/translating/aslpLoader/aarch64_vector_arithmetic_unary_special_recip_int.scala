/* AUTO-GENERATED ASLp LIFTER FILE */
package aslloader
import util.Logger
import ir._

def f_aarch64_vector_arithmetic_unary_special_recip_int (v_st: LiftState,v_enc: BV,v_pc: BV) : Unit = {
  if (f_eq_bits(v_st, BigInt(32), f_and_bits(v_st, BigInt(32), v_enc, mkBits(v_st, 32, BigInt("00000000010000000000000000000000", 2))), mkBits(v_st, 32, BigInt("00000000010000000000000000000000", 2)))) then {
    throw Exception("not supported")
  } else {
    if (f_eq_bits(v_st, BigInt(32), f_and_bits(v_st, BigInt(32), v_enc, mkBits(v_st, 32, BigInt("01000000000000000000000000000000", 2))), mkBits(v_st, 32, BigInt("01000000000000000000000000000000", 2)))) then {
      val v_Exp5__2 = Mutable[Expr](rTExprDefault)
      v_Exp5__2.v = f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5))))
      val v_UnsignedRecipEstimate8__2 : RTSym = f_decl_bv(v_st, "UnsignedRecipEstimate8__2", BigInt(32)) 
      val v_temp0 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(31), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("0", 2))))) 
      f_switch_context (v_st,f_true_branch(v_st, v_temp0))
      f_gen_store (v_st,v_UnsignedRecipEstimate8__2,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
      f_switch_context (v_st,f_false_branch(v_st, v_temp0))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_sle_bits(v_st, BigInt(10), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0100000000", 2))), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(23), BigInt(9)), f_gen_int_lit(v_st, BigInt(10)))), f_gen_bool_lit(v_st, true)))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_bool_lit(v_st, true), f_gen_slt_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(23), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000001000000000", 2))))))
      f_gen_store (v_st,v_UnsignedRecipEstimate8__2,f_gen_append_bits(v_st, BigInt(9), BigInt(23), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(23), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), BigInt(0), BigInt(9)), BigInt(0), BigInt(9)), f_gen_bit_lit(v_st, BigInt(23), mkBits(v_st, 23, BigInt("00000000000000000000000", 2)))))
      f_switch_context (v_st,f_merge_branch(v_st, v_temp0))
      val v_UnsignedRecipEstimate19__2 : RTSym = f_decl_bv(v_st, "UnsignedRecipEstimate19__2", BigInt(32)) 
      val v_temp1 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, v_Exp5__2.v, BigInt(63), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("0", 2))))) 
      f_switch_context (v_st,f_true_branch(v_st, v_temp1))
      f_gen_store (v_st,v_UnsignedRecipEstimate19__2,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
      f_switch_context (v_st,f_false_branch(v_st, v_temp1))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_sle_bits(v_st, BigInt(10), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0100000000", 2))), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp5__2.v, BigInt(55), BigInt(9)), f_gen_int_lit(v_st, BigInt(10)))), f_gen_bool_lit(v_st, true)))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_bool_lit(v_st, true), f_gen_slt_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp5__2.v, BigInt(55), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000001000000000", 2))))))
      f_gen_store (v_st,v_UnsignedRecipEstimate19__2,f_gen_append_bits(v_st, BigInt(9), BigInt(23), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp5__2.v, BigInt(55), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), BigInt(0), BigInt(9)), BigInt(0), BigInt(9)), f_gen_bit_lit(v_st, BigInt(23), mkBits(v_st, 23, BigInt("00000000000000000000000", 2)))))
      f_switch_context (v_st,f_merge_branch(v_st, v_temp1))
      val v_UnsignedRecipEstimate30__2 : RTSym = f_decl_bv(v_st, "UnsignedRecipEstimate30__2", BigInt(32)) 
      val v_temp2 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, v_Exp5__2.v, BigInt(95), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("0", 2))))) 
      f_switch_context (v_st,f_true_branch(v_st, v_temp2))
      f_gen_store (v_st,v_UnsignedRecipEstimate30__2,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
      f_switch_context (v_st,f_false_branch(v_st, v_temp2))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_sle_bits(v_st, BigInt(10), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0100000000", 2))), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp5__2.v, BigInt(87), BigInt(9)), f_gen_int_lit(v_st, BigInt(10)))), f_gen_bool_lit(v_st, true)))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_bool_lit(v_st, true), f_gen_slt_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp5__2.v, BigInt(87), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000001000000000", 2))))))
      f_gen_store (v_st,v_UnsignedRecipEstimate30__2,f_gen_append_bits(v_st, BigInt(9), BigInt(23), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp5__2.v, BigInt(87), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), BigInt(0), BigInt(9)), BigInt(0), BigInt(9)), f_gen_bit_lit(v_st, BigInt(23), mkBits(v_st, 23, BigInt("00000000000000000000000", 2)))))
      f_switch_context (v_st,f_merge_branch(v_st, v_temp2))
      val v_UnsignedRecipEstimate41__2 : RTSym = f_decl_bv(v_st, "UnsignedRecipEstimate41__2", BigInt(32)) 
      val v_temp3 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, v_Exp5__2.v, BigInt(127), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("0", 2))))) 
      f_switch_context (v_st,f_true_branch(v_st, v_temp3))
      f_gen_store (v_st,v_UnsignedRecipEstimate41__2,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
      f_switch_context (v_st,f_false_branch(v_st, v_temp3))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_sle_bits(v_st, BigInt(10), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0100000000", 2))), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp5__2.v, BigInt(119), BigInt(9)), f_gen_int_lit(v_st, BigInt(10)))), f_gen_bool_lit(v_st, true)))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_bool_lit(v_st, true), f_gen_slt_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp5__2.v, BigInt(119), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000001000000000", 2))))))
      f_gen_store (v_st,v_UnsignedRecipEstimate41__2,f_gen_append_bits(v_st, BigInt(9), BigInt(23), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp5__2.v, BigInt(119), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), BigInt(0), BigInt(9)), BigInt(0), BigInt(9)), f_gen_bit_lit(v_st, BigInt(23), mkBits(v_st, 23, BigInt("00000000000000000000000", 2)))))
      f_switch_context (v_st,f_merge_branch(v_st, v_temp3))
      f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_append_bits(v_st, BigInt(32), BigInt(96), f_gen_load(v_st, v_UnsignedRecipEstimate41__2), f_gen_append_bits(v_st, BigInt(32), BigInt(64), f_gen_load(v_st, v_UnsignedRecipEstimate30__2), f_gen_append_bits(v_st, BigInt(32), BigInt(32), f_gen_load(v_st, v_UnsignedRecipEstimate19__2), f_gen_load(v_st, v_UnsignedRecipEstimate8__2)))))
    } else {
      val v_Exp58__2 = Mutable[Expr](rTExprDefault)
      v_Exp58__2.v = f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5))))
      val v_UnsignedRecipEstimate61__2 : RTSym = f_decl_bv(v_st, "UnsignedRecipEstimate61__2", BigInt(32)) 
      val v_temp4 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(31), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("0", 2))))) 
      f_switch_context (v_st,f_true_branch(v_st, v_temp4))
      f_gen_store (v_st,v_UnsignedRecipEstimate61__2,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
      f_switch_context (v_st,f_false_branch(v_st, v_temp4))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_sle_bits(v_st, BigInt(10), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0100000000", 2))), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(23), BigInt(9)), f_gen_int_lit(v_st, BigInt(10)))), f_gen_bool_lit(v_st, true)))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_bool_lit(v_st, true), f_gen_slt_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(23), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000001000000000", 2))))))
      f_gen_store (v_st,v_UnsignedRecipEstimate61__2,f_gen_append_bits(v_st, BigInt(9), BigInt(23), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(23), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), BigInt(0), BigInt(9)), BigInt(0), BigInt(9)), f_gen_bit_lit(v_st, BigInt(23), mkBits(v_st, 23, BigInt("00000000000000000000000", 2)))))
      f_switch_context (v_st,f_merge_branch(v_st, v_temp4))
      val v_UnsignedRecipEstimate72__2 : RTSym = f_decl_bv(v_st, "UnsignedRecipEstimate72__2", BigInt(32)) 
      val v_temp5 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, v_Exp58__2.v, BigInt(63), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("0", 2))))) 
      f_switch_context (v_st,f_true_branch(v_st, v_temp5))
      f_gen_store (v_st,v_UnsignedRecipEstimate72__2,f_gen_bit_lit(v_st, BigInt(32), mkBits(v_st, 32, BigInt("11111111111111111111111111111111", 2))))
      f_switch_context (v_st,f_false_branch(v_st, v_temp5))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_sle_bits(v_st, BigInt(10), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0100000000", 2))), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp58__2.v, BigInt(55), BigInt(9)), f_gen_int_lit(v_st, BigInt(10)))), f_gen_bool_lit(v_st, true)))
      f_gen_assert (v_st,f_gen_and_bool(v_st, f_gen_bool_lit(v_st, true), f_gen_slt_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp58__2.v, BigInt(55), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000001000000000", 2))))))
      f_gen_store (v_st,v_UnsignedRecipEstimate72__2,f_gen_append_bits(v_st, BigInt(9), BigInt(23), f_gen_slice(v_st, f_gen_slice(v_st, f_gen_sdiv_bits(v_st, BigInt(21), f_gen_add_bits(v_st, BigInt(21), f_gen_sdiv_bits(v_st, BigInt(21), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("010000000000000000000", 2))), f_gen_ZeroExtend(v_st, BigInt(10), BigInt(21), f_gen_add_bits(v_st, BigInt(10), f_gen_mul_bits(v_st, BigInt(10), f_gen_ZeroExtend(v_st, BigInt(9), BigInt(10), f_gen_slice(v_st, v_Exp58__2.v, BigInt(55), BigInt(9)), f_gen_int_lit(v_st, BigInt(10))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000010", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000001", 2)))), f_gen_int_lit(v_st, BigInt(21)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000001", 2)))), f_gen_bit_lit(v_st, BigInt(21), mkBits(v_st, 21, BigInt("000000000000000000010", 2)))), BigInt(0), BigInt(9)), BigInt(0), BigInt(9)), f_gen_bit_lit(v_st, BigInt(23), mkBits(v_st, 23, BigInt("00000000000000000000000", 2)))))
      f_switch_context (v_st,f_merge_branch(v_st, v_temp5))
      f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_ZeroExtend(v_st, BigInt(64), BigInt(128), f_gen_append_bits(v_st, BigInt(32), BigInt(32), f_gen_load(v_st, v_UnsignedRecipEstimate72__2), f_gen_load(v_st, v_UnsignedRecipEstimate61__2)), f_gen_int_lit(v_st, BigInt(128))))
    }
  }
}

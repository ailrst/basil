/* AUTO-GENERATED ASLp LIFTER FILE */
package aslloader
import util.Logger
import ir._

def f_aarch64_vector_fp16_movi (v_st: LiftState,v_enc: BitVecLiteral) : Unit = {
  if (f_eq_bits(v_st, BigInt(1), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BitVecLiteral(BigInt("1", 2), 1))) then {
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_bit_lit(v_st, ((BigInt(16)) * (BigInt(8))), f_replicate_bits(v_st, BigInt(16), BigInt(8), f_append_bits(v_st, BigInt(10), BigInt(6), f_append_bits(v_st, BigInt(4), BigInt(6), f_append_bits(v_st, BigInt(2), BigInt(2), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(18),BigInt(1)), f_not_bits(v_st, BigInt(1), bvextract(v_st,v_enc,BigInt(17),BigInt(1)))), f_replicate_bits(v_st, BigInt(1), BigInt(2), bvextract(v_st,v_enc,BigInt(17),BigInt(1)), BigInt(2))), f_append_bits(v_st, BigInt(5), BigInt(1), f_append_bits(v_st, BigInt(4), BigInt(1), f_append_bits(v_st, BigInt(3), BigInt(1), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(16),BigInt(1)), bvextract(v_st,v_enc,BigInt(9),BigInt(1))), bvextract(v_st,v_enc,BigInt(8),BigInt(1))), bvextract(v_st,v_enc,BigInt(7),BigInt(1))), bvextract(v_st,v_enc,BigInt(6),BigInt(1))), bvextract(v_st,v_enc,BigInt(5),BigInt(1)))), BitVecLiteral(BigInt("000000", 2), 6)), BigInt(8))))
  } else {
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_bit_lit(v_st, BigInt(128), f_ZeroExtend(v_st, BigInt(64), BigInt(128), f_replicate_bits(v_st, BigInt(16), BigInt(4), f_append_bits(v_st, BigInt(10), BigInt(6), f_append_bits(v_st, BigInt(4), BigInt(6), f_append_bits(v_st, BigInt(2), BigInt(2), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(18),BigInt(1)), f_not_bits(v_st, BigInt(1), bvextract(v_st,v_enc,BigInt(17),BigInt(1)))), f_replicate_bits(v_st, BigInt(1), BigInt(2), bvextract(v_st,v_enc,BigInt(17),BigInt(1)), BigInt(2))), f_append_bits(v_st, BigInt(5), BigInt(1), f_append_bits(v_st, BigInt(4), BigInt(1), f_append_bits(v_st, BigInt(3), BigInt(1), f_append_bits(v_st, BigInt(2), BigInt(1), f_append_bits(v_st, BigInt(1), BigInt(1), bvextract(v_st,v_enc,BigInt(16),BigInt(1)), bvextract(v_st,v_enc,BigInt(9),BigInt(1))), bvextract(v_st,v_enc,BigInt(8),BigInt(1))), bvextract(v_st,v_enc,BigInt(7),BigInt(1))), bvextract(v_st,v_enc,BigInt(6),BigInt(1))), bvextract(v_st,v_enc,BigInt(5),BigInt(1)))), BitVecLiteral(BigInt("000000", 2), 6)), BigInt(4)), BigInt(128))))
  }
}

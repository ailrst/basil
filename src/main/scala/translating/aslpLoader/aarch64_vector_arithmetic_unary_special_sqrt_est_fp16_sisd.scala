/* AUTO-GENERATED ASLp LIFTER FILE */
package aslloader
import util.Logger
import ir._

def f_aarch64_vector_arithmetic_unary_special_sqrt_est_fp16_sisd (v_st: LiftState,v_enc: BV,v_pc: BV) : Unit = {
  val v_Exp6__2 = Mutable[Expr](rTExprDefault)
  v_Exp6__2.v = f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5))))
  val v_FPRSqrtEstimate10__2 : RTSym = f_decl_bv(v_st, "FPRSqrtEstimate10__2", BigInt(16)) 
  val v_FPUnpackBase14__4 : RTSym = f_decl_bv(v_st, "FPUnpackBase14__4", BigInt(3)) 
  val v_temp0 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(5), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(10), BigInt(5)), f_gen_bit_lit(v_st, BigInt(5), mkBits(v_st, 5, BigInt("00000", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp0))
  val v_temp1 : RTLabel = f_gen_branch(v_st, f_gen_or_bool(v_st, f_gen_eq_bits(v_st, BigInt(10), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(10)), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000000", 2)))), f_gen_and_bool(v_st, f_gen_not_bool(v_st, f_gen_eq_bits(v_st, BigInt(10), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(10)), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000000", 2))))), f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_load(v_st, v_FPCR.v), BigInt(19), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp1))
  val v_temp2 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(15), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp2))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("001", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp2))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("001", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp1))
  val v_temp3 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(15), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp3))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("000", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp3))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("000", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp0))
  val v_temp4 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(5), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(10), BigInt(5)), f_gen_bit_lit(v_st, BigInt(5), mkBits(v_st, 5, BigInt("11111", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp4))
  val v_temp5 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(10), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(10)), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000000", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp5))
  val v_temp6 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(15), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp6))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("010", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp6))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("010", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp5))
  val v_If32__4 : RTSym = f_decl_bv(v_st, "If32__4", BigInt(3)) 
  val v_temp7 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(9), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp7))
  f_gen_store (v_st,v_If32__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("011", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp7))
  f_gen_store (v_st,v_If32__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("100", 2))))
  f_switch_context (v_st,f_merge_branch(v_st, v_temp7))
  val v_temp8 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, v_Exp6__2.v, BigInt(15), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp8))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_load(v_st, v_If32__4))
  f_switch_context (v_st,f_false_branch(v_st, v_temp8))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_load(v_st, v_If32__4))
  f_switch_context (v_st,f_false_branch(v_st, v_temp4))
  val v_temp9 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(15), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp9))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("000", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp9))
  f_gen_store (v_st,v_FPUnpackBase14__4,f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("000", 2))))
  f_switch_context (v_st,f_merge_branch(v_st, v_temp0))
  val v_temp10 : RTLabel = f_gen_branch(v_st, f_gen_or_bool(v_st, f_gen_eq_bits(v_st, BigInt(3), f_gen_load(v_st, v_FPUnpackBase14__4), f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("100", 2)))), f_gen_and_bool(v_st, f_gen_not_bool(v_st, f_gen_eq_bits(v_st, BigInt(3), f_gen_load(v_st, v_FPUnpackBase14__4), f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("100", 2))))), f_gen_eq_bits(v_st, BigInt(3), f_gen_load(v_st, v_FPUnpackBase14__4), f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("011", 2))))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp10))
  val v_FPProcessNaN41__3 : RTSym = f_decl_bv(v_st, "FPProcessNaN41__3", BigInt(16)) 
  val v_Exp43__3 : RTSym = f_decl_bool(v_st, "Exp43__3") 
  f_gen_store (v_st,v_Exp43__3,f_gen_or_bool(v_st, f_gen_eq_bits(v_st, BigInt(3), f_gen_load(v_st, v_FPUnpackBase14__4), f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("011", 2)))), f_gen_and_bool(v_st, f_gen_not_bool(v_st, f_gen_eq_bits(v_st, BigInt(3), f_gen_load(v_st, v_FPUnpackBase14__4), f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("011", 2))))), f_gen_eq_bits(v_st, BigInt(3), f_gen_load(v_st, v_FPUnpackBase14__4), f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("100", 2)))))))
  f_gen_assert (v_st,f_gen_load(v_st, v_Exp43__3))
  val v_temp11 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(3), f_gen_load(v_st, v_FPUnpackBase14__4), f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("100", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp11))
  val v_temp12 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_load(v_st, v_FPCR.v), BigInt(8), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp12))
  f_gen_assert (v_st,f_gen_bool_lit(v_st, false))
  f_switch_context (v_st,f_false_branch(v_st, v_temp12))
  f_gen_store (v_st,v_FPSR.v,f_gen_append_bits(v_st, BigInt(31), BigInt(1), f_gen_slice(v_st, f_gen_load(v_st, v_FPSR.v), BigInt(1), BigInt(31)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2)))))
  f_switch_context (v_st,f_merge_branch(v_st, v_temp12))
  val v_temp13 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_load(v_st, v_FPCR.v), BigInt(25), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp13))
  f_gen_store (v_st,v_FPProcessNaN41__3,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0111111000000000", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp13))
  f_gen_store (v_st,v_FPProcessNaN41__3,f_gen_append_bits(v_st, BigInt(6), BigInt(10), f_gen_slice(v_st, v_Exp6__2.v, BigInt(10), BigInt(6)), f_gen_append_bits(v_st, BigInt(1), BigInt(9), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(0), BigInt(9)))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp11))
  val v_temp14 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_load(v_st, v_FPCR.v), BigInt(25), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp14))
  f_gen_store (v_st,v_FPProcessNaN41__3,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0111111000000000", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp14))
  f_gen_store (v_st,v_FPProcessNaN41__3,f_gen_slice(v_st, v_Exp6__2.v, BigInt(0), BigInt(16)))
  f_switch_context (v_st,f_merge_branch(v_st, v_temp11))
  f_gen_store (v_st,v_FPRSqrtEstimate10__2,f_gen_load(v_st, v_FPProcessNaN41__3))
  f_switch_context (v_st,f_false_branch(v_st, v_temp10))
  val v_temp15 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(3), f_gen_load(v_st, v_FPUnpackBase14__4), f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("001", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp15))
  val v_temp16 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_load(v_st, v_FPCR.v), BigInt(9), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp16))
  f_gen_assert (v_st,f_gen_bool_lit(v_st, false))
  f_switch_context (v_st,f_false_branch(v_st, v_temp16))
  f_gen_store (v_st,v_FPSR.v,f_gen_append_bits(v_st, BigInt(30), BigInt(2), f_gen_slice(v_st, f_gen_load(v_st, v_FPSR.v), BigInt(2), BigInt(30)), f_gen_append_bits(v_st, BigInt(1), BigInt(1), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))), f_gen_slice(v_st, f_gen_load(v_st, v_FPSR.v), BigInt(0), BigInt(1)))))
  f_switch_context (v_st,f_merge_branch(v_st, v_temp16))
  f_gen_store (v_st,v_FPRSqrtEstimate10__2,f_gen_append_bits(v_st, BigInt(6), BigInt(10), f_gen_append_bits(v_st, BigInt(1), BigInt(5), f_gen_slice(v_st, v_Exp6__2.v, BigInt(15), BigInt(1)), f_gen_bit_lit(v_st, BigInt(5), mkBits(v_st, 5, BigInt("11111", 2)))), f_gen_bit_lit(v_st, BigInt(10), mkBits(v_st, 10, BigInt("0000000000", 2)))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp15))
  val v_temp17 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, v_Exp6__2.v, BigInt(15), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp17))
  val v_temp18 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(1), f_gen_slice(v_st, f_gen_load(v_st, v_FPCR.v), BigInt(8), BigInt(1)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp18))
  f_gen_assert (v_st,f_gen_bool_lit(v_st, false))
  f_switch_context (v_st,f_false_branch(v_st, v_temp18))
  f_gen_store (v_st,v_FPSR.v,f_gen_append_bits(v_st, BigInt(31), BigInt(1), f_gen_slice(v_st, f_gen_load(v_st, v_FPSR.v), BigInt(1), BigInt(31)), f_gen_bit_lit(v_st, BigInt(1), mkBits(v_st, 1, BigInt("1", 2)))))
  f_switch_context (v_st,f_merge_branch(v_st, v_temp18))
  f_gen_store (v_st,v_FPRSqrtEstimate10__2,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0111111000000000", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp17))
  val v_temp19 : RTLabel = f_gen_branch(v_st, f_gen_eq_bits(v_st, BigInt(3), f_gen_load(v_st, v_FPUnpackBase14__4), f_gen_bit_lit(v_st, BigInt(3), mkBits(v_st, 3, BigInt("010", 2))))) 
  f_switch_context (v_st,f_true_branch(v_st, v_temp19))
  f_gen_store (v_st,v_FPRSqrtEstimate10__2,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
  f_switch_context (v_st,f_false_branch(v_st, v_temp19))
  f_gen_assert (v_st,f_gen_bool_lit(v_st, false))
  f_switch_context (v_st,f_merge_branch(v_st, v_temp10))
  f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_ZeroExtend(v_st, BigInt(16), BigInt(128), f_gen_load(v_st, v_FPRSqrtEstimate10__2), f_gen_int_lit(v_st, BigInt(128))))
}

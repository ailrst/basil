/* AUTO-GENERATED ASLp LIFTER FILE */
package aslloader
import util.Logger
import ir._

def f_aarch64_vector_arithmetic_binary_uniform_mul_int_bfdot (v_st: LiftState,v_enc: BitVecLiteral) : Unit = {
  if (f_eq_bits(v_st, BigInt(1), bvextract(v_st,v_enc,BigInt(30),BigInt(1)), BitVecLiteral(BigInt("1", 2), 1))) then {
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(16),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(16),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    val v_Exp19__2 : RTSym = f_decl_bv(v_st, "Exp19__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp19__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(0), BigInt(16))))
    val v_Exp20__2 : RTSym = f_decl_bv(v_st, "Exp20__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp20__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(16), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(16), BigInt(16))))
    val v_Exp21__2 : RTSym = f_decl_bv(v_st, "Exp21__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp21__2,f_gen_BFAdd(v_st, f_gen_load(v_st, v_Exp19__2), f_gen_load(v_st, v_Exp20__2)))
    val v_Exp24__2 : RTSym = f_decl_bv(v_st, "Exp24__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp24__2,f_gen_BFAdd(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(0), BigInt(32)), f_gen_load(v_st, v_Exp21__2)))
    val v_Exp30__2 : RTSym = f_decl_bv(v_st, "Exp30__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp30__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(32), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(32), BigInt(16))))
    val v_Exp31__2 : RTSym = f_decl_bv(v_st, "Exp31__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp31__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(48), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(48), BigInt(16))))
    val v_Exp32__2 : RTSym = f_decl_bv(v_st, "Exp32__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp32__2,f_gen_BFAdd(v_st, f_gen_load(v_st, v_Exp30__2), f_gen_load(v_st, v_Exp31__2)))
    val v_Exp34__2 : RTSym = f_decl_bv(v_st, "Exp34__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp34__2,f_gen_BFAdd(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(32), BigInt(32)), f_gen_load(v_st, v_Exp32__2)))
    val v_Exp40__2 : RTSym = f_decl_bv(v_st, "Exp40__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp40__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(64), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(64), BigInt(16))))
    val v_Exp41__2 : RTSym = f_decl_bv(v_st, "Exp41__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp41__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(80), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(80), BigInt(16))))
    val v_Exp42__2 : RTSym = f_decl_bv(v_st, "Exp42__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp42__2,f_gen_BFAdd(v_st, f_gen_load(v_st, v_Exp40__2), f_gen_load(v_st, v_Exp41__2)))
    val v_Exp44__2 : RTSym = f_decl_bv(v_st, "Exp44__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp44__2,f_gen_BFAdd(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(64), BigInt(32)), f_gen_load(v_st, v_Exp42__2)))
    val v_Exp50__2 : RTSym = f_decl_bv(v_st, "Exp50__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp50__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(96), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(96), BigInt(16))))
    val v_Exp51__2 : RTSym = f_decl_bv(v_st, "Exp51__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp51__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(112), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(112), BigInt(16))))
    val v_Exp52__2 : RTSym = f_decl_bv(v_st, "Exp52__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp52__2,f_gen_BFAdd(v_st, f_gen_load(v_st, v_Exp50__2), f_gen_load(v_st, v_Exp51__2)))
    val v_Exp54__2 : RTSym = f_decl_bv(v_st, "Exp54__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp54__2,f_gen_BFAdd(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(96), BigInt(32)), f_gen_load(v_st, v_Exp52__2)))
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_append_bits(v_st, BigInt(32), BigInt(96), f_gen_load(v_st, v_Exp54__2), f_gen_append_bits(v_st, BigInt(32), BigInt(64), f_gen_load(v_st, v_Exp44__2), f_gen_append_bits(v_st, BigInt(32), BigInt(32), f_gen_load(v_st, v_Exp34__2), f_gen_load(v_st, v_Exp24__2)))))
  } else {
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(5),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(16),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(16),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    val v_Exp74__2 : RTSym = f_decl_bv(v_st, "Exp74__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp74__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(0), BigInt(16))))
    val v_Exp75__2 : RTSym = f_decl_bv(v_st, "Exp75__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp75__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(16), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(16), BigInt(16))))
    val v_Exp76__2 : RTSym = f_decl_bv(v_st, "Exp76__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp76__2,f_gen_BFAdd(v_st, f_gen_load(v_st, v_Exp74__2), f_gen_load(v_st, v_Exp75__2)))
    val v_Exp79__2 : RTSym = f_decl_bv(v_st, "Exp79__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp79__2,f_gen_BFAdd(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(0), BigInt(32)), f_gen_load(v_st, v_Exp76__2)))
    val v_Exp85__2 : RTSym = f_decl_bv(v_st, "Exp85__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp85__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(32), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(32), BigInt(16))))
    val v_Exp86__2 : RTSym = f_decl_bv(v_st, "Exp86__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp86__2,f_gen_BFMul(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(48), BigInt(16)), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(16),BigInt(5)))), BigInt(48), BigInt(16))))
    val v_Exp87__2 : RTSym = f_decl_bv(v_st, "Exp87__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp87__2,f_gen_BFAdd(v_st, f_gen_load(v_st, v_Exp85__2), f_gen_load(v_st, v_Exp86__2)))
    val v_Exp89__2 : RTSym = f_decl_bv(v_st, "Exp89__2", BigInt(32)) 
    f_gen_store (v_st,v_Exp89__2,f_gen_BFAdd(v_st, f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5)))), BigInt(32), BigInt(32)), f_gen_load(v_st, v_Exp87__2)))
    assert (((f_sle_bits(v_st, BigInt(6), BitVecLiteral(BigInt("000000", 2), 6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)))) && (f_sle_bits(v_st, BigInt(6), f_ZeroExtend(v_st, BigInt(5), BigInt(6), bvextract(v_st,v_enc,BigInt(0),BigInt(5)), BigInt(6)), BitVecLiteral(BigInt("011111", 2), 6)))))
    f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_ZeroExtend(v_st, BigInt(64), BigInt(128), f_gen_append_bits(v_st, BigInt(32), BigInt(32), f_gen_load(v_st, v_Exp89__2), f_gen_load(v_st, v_Exp79__2)), f_gen_int_lit(v_st, BigInt(128))))
  }
}

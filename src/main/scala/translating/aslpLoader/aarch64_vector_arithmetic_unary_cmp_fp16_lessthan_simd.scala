/* AUTO-GENERATED ASLp LIFTER FILE */
package aslloader
import util.Logger
import ir._

def f_aarch64_vector_arithmetic_unary_cmp_fp16_lessthan_simd (v_st: LiftState,v_enc: BV,v_pc: BV) : Unit = {
  if (f_eq_bits(v_st, BigInt(32), f_and_bits(v_st, BigInt(32), v_enc, mkBits(v_st, 32, BigInt("01000000000000000000000000000000", 2))), mkBits(v_st, 32, BigInt("01000000000000000000000000000000", 2)))) then {
    val v_Exp6__2 = Mutable[Expr](rTExprDefault)
    v_Exp6__2.v = f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5))))
    val v_Exp12__2 = Mutable[Expr](rTExprDefault)
    v_Exp12__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If14__1 : RTSym = f_decl_bv(v_st, "If14__1", BigInt(16)) 
    val v_temp0 : RTLabel = f_gen_branch(v_st, v_Exp12__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp0))
    f_gen_store (v_st,v_If14__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp0))
    f_gen_store (v_st,v_If14__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp0))
    val v_Exp19__2 = Mutable[Expr](rTExprDefault)
    v_Exp19__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(16), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If20__1 : RTSym = f_decl_bv(v_st, "If20__1", BigInt(16)) 
    val v_temp1 : RTLabel = f_gen_branch(v_st, v_Exp19__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp1))
    f_gen_store (v_st,v_If20__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp1))
    f_gen_store (v_st,v_If20__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp1))
    val v_Exp25__2 = Mutable[Expr](rTExprDefault)
    v_Exp25__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(32), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If26__1 : RTSym = f_decl_bv(v_st, "If26__1", BigInt(16)) 
    val v_temp2 : RTLabel = f_gen_branch(v_st, v_Exp25__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp2))
    f_gen_store (v_st,v_If26__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp2))
    f_gen_store (v_st,v_If26__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp2))
    val v_Exp31__2 = Mutable[Expr](rTExprDefault)
    v_Exp31__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(48), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If32__1 : RTSym = f_decl_bv(v_st, "If32__1", BigInt(16)) 
    val v_temp3 : RTLabel = f_gen_branch(v_st, v_Exp31__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp3))
    f_gen_store (v_st,v_If32__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp3))
    f_gen_store (v_st,v_If32__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp3))
    val v_Exp37__2 = Mutable[Expr](rTExprDefault)
    v_Exp37__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(64), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If38__1 : RTSym = f_decl_bv(v_st, "If38__1", BigInt(16)) 
    val v_temp4 : RTLabel = f_gen_branch(v_st, v_Exp37__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp4))
    f_gen_store (v_st,v_If38__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp4))
    f_gen_store (v_st,v_If38__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp4))
    val v_Exp43__2 = Mutable[Expr](rTExprDefault)
    v_Exp43__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(80), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If44__1 : RTSym = f_decl_bv(v_st, "If44__1", BigInt(16)) 
    val v_temp5 : RTLabel = f_gen_branch(v_st, v_Exp43__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp5))
    f_gen_store (v_st,v_If44__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp5))
    f_gen_store (v_st,v_If44__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp5))
    val v_Exp49__2 = Mutable[Expr](rTExprDefault)
    v_Exp49__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(96), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If50__1 : RTSym = f_decl_bv(v_st, "If50__1", BigInt(16)) 
    val v_temp6 : RTLabel = f_gen_branch(v_st, v_Exp49__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp6))
    f_gen_store (v_st,v_If50__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp6))
    f_gen_store (v_st,v_If50__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp6))
    val v_Exp55__2 = Mutable[Expr](rTExprDefault)
    v_Exp55__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp6__2.v, BigInt(112), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If56__1 : RTSym = f_decl_bv(v_st, "If56__1", BigInt(16)) 
    val v_temp7 : RTLabel = f_gen_branch(v_st, v_Exp55__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp7))
    f_gen_store (v_st,v_If56__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp7))
    f_gen_store (v_st,v_If56__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp7))
    f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_append_bits(v_st, BigInt(16), BigInt(112), f_gen_load(v_st, v_If56__1), f_gen_append_bits(v_st, BigInt(16), BigInt(96), f_gen_load(v_st, v_If50__1), f_gen_append_bits(v_st, BigInt(16), BigInt(80), f_gen_load(v_st, v_If44__1), f_gen_append_bits(v_st, BigInt(16), BigInt(64), f_gen_load(v_st, v_If38__1), f_gen_append_bits(v_st, BigInt(16), BigInt(48), f_gen_load(v_st, v_If32__1), f_gen_append_bits(v_st, BigInt(16), BigInt(32), f_gen_load(v_st, v_If26__1), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_load(v_st, v_If20__1), f_gen_load(v_st, v_If14__1)))))))))
  } else {
    val v_Exp67__2 = Mutable[Expr](rTExprDefault)
    v_Exp67__2.v = f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5))))
    val v_Exp73__2 = Mutable[Expr](rTExprDefault)
    v_Exp73__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, f_gen_array_load(v_st, v__Z.v, f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(5),BigInt(5)))), BigInt(0), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If75__1 : RTSym = f_decl_bv(v_st, "If75__1", BigInt(16)) 
    val v_temp8 : RTLabel = f_gen_branch(v_st, v_Exp73__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp8))
    f_gen_store (v_st,v_If75__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp8))
    f_gen_store (v_st,v_If75__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp8))
    val v_Exp80__2 = Mutable[Expr](rTExprDefault)
    v_Exp80__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp67__2.v, BigInt(16), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If81__1 : RTSym = f_decl_bv(v_st, "If81__1", BigInt(16)) 
    val v_temp9 : RTLabel = f_gen_branch(v_st, v_Exp80__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp9))
    f_gen_store (v_st,v_If81__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp9))
    f_gen_store (v_st,v_If81__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp9))
    val v_Exp86__2 = Mutable[Expr](rTExprDefault)
    v_Exp86__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp67__2.v, BigInt(32), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If87__1 : RTSym = f_decl_bv(v_st, "If87__1", BigInt(16)) 
    val v_temp10 : RTLabel = f_gen_branch(v_st, v_Exp86__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp10))
    f_gen_store (v_st,v_If87__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp10))
    f_gen_store (v_st,v_If87__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp10))
    val v_Exp92__2 = Mutable[Expr](rTExprDefault)
    v_Exp92__2.v = f_gen_FPCompareGT(v_st, BigInt(16), f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))), f_gen_slice(v_st, v_Exp67__2.v, BigInt(48), BigInt(16)), f_gen_load(v_st, v_FPCR.v))
    val v_If93__1 : RTSym = f_decl_bv(v_st, "If93__1", BigInt(16)) 
    val v_temp11 : RTLabel = f_gen_branch(v_st, v_Exp92__2.v) 
    f_switch_context (v_st,f_true_branch(v_st, v_temp11))
    f_gen_store (v_st,v_If93__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("1111111111111111", 2))))
    f_switch_context (v_st,f_false_branch(v_st, v_temp11))
    f_gen_store (v_st,v_If93__1,f_gen_bit_lit(v_st, BigInt(16), mkBits(v_st, 16, BigInt("0000000000000000", 2))))
    f_switch_context (v_st,f_merge_branch(v_st, v_temp11))
    f_gen_array_store (v_st,v__Z.v,f_cvt_bits_uint(v_st, BigInt(5), bvextract(v_st,v_enc,BigInt(0),BigInt(5))),f_gen_ZeroExtend(v_st, BigInt(64), BigInt(128), f_gen_append_bits(v_st, BigInt(16), BigInt(48), f_gen_load(v_st, v_If93__1), f_gen_append_bits(v_st, BigInt(16), BigInt(32), f_gen_load(v_st, v_If87__1), f_gen_append_bits(v_st, BigInt(16), BigInt(16), f_gen_load(v_st, v_If81__1), f_gen_load(v_st, v_If75__1)))), f_gen_int_lit(v_st, BigInt(128))))
  }
}

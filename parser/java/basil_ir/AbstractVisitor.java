// File generated by the BNF Converter (bnfc 2.9.5).

package basil_ir;

/** Abstract Visitor */

public class AbstractVisitor<R,A> implements AllVisitor<R,A> {
    /* Program */
    public R visit(basil_ir.Absyn.Prog p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Program p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Declaration */
    public R visit(basil_ir.Absyn.LetDecl p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.MemDecl p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.VarDecl p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.Procedure p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Declaration p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* MExpr */
    public R visit(basil_ir.Absyn.MSym p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BlockM p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.MExpr p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* IntType */
    public R visit(basil_ir.Absyn.IntT p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.IntType p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BoolType */
    public R visit(basil_ir.Absyn.BoolT p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BoolType p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* MapType */
    public R visit(basil_ir.Absyn.MapT p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.MapType p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BVType */
    public R visit(basil_ir.Absyn.ShortBVT p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BitvectorType p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BVType p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Type */
    public R visit(basil_ir.Absyn.TypeIntType p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.TypeBoolType p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.TypeMapType p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.TypeBVType p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Type p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* IntLit */
    public R visit(basil_ir.Absyn.HexInt p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.DecInt p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.IntLit p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* AddrAttr */
    public R visit(basil_ir.Absyn.AddrAttrSome p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.AddrAttrNone p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.AddrAttrEmpty p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.AddrAttr p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Endian */
    public R visit(basil_ir.Absyn.LittleEndian p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BigEndian p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Endian p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Statement */
    public R visit(basil_ir.Absyn.AssignStmt p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.SLoad p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.SStore p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.DirectCall p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.DirectCallReturnLocal p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.DirectCallReturn p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IndirectCall p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.Assume p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.Assert p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Statement p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Assign */
    public R visit(basil_ir.Absyn.IntAssign p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVAssign p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolAssign p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Assign p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Jump */
    public R visit(basil_ir.Absyn.GoTo p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.Unreachable p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.Return p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Jump p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* LVar */
    public R visit(basil_ir.Absyn.LVarIntLVar p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.LVarBVLVar p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.LVarBoolLVar p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.LVar p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BVLVar */
    public R visit(basil_ir.Absyn.LocalBVLVar p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.GlobalBVLVar p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BVLVar p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* IntLVar */
    public R visit(basil_ir.Absyn.LocalIntLVar p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.GlobalIntLVar p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.IntLVar p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BoolLVar */
    public R visit(basil_ir.Absyn.LocalBoolLVar p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.GlobalBoolLVar p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BoolLVar p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Block */
    public R visit(basil_ir.Absyn.B p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Block p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* PEntry */
    public R visit(basil_ir.Absyn.EntrySome p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.EntryNone p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.PEntry p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* PExit */
    public R visit(basil_ir.Absyn.ESome p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.ENone p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.PExit p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* PAddress */
    public R visit(basil_ir.Absyn.AddrSome p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.AddrNone p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.PAddress p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* InternalBlocks */
    public R visit(basil_ir.Absyn.BSome p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BNone p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.InternalBlocks p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* ProcDef */
    public R visit(basil_ir.Absyn.PD p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.ProcDef p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Params */
    public R visit(basil_ir.Absyn.Param p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Params p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Expr */
    public R visit(basil_ir.Absyn.BitvectorExpr p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.LogicalExpr p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntegerExpr p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.Expr p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BVExpr */
    public R visit(basil_ir.Absyn.BVBinary p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVUnary p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.ZeroExtend p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.SignExtend p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.Extract p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.Concat p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLiteral p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.RBVVar p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BVExpr p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* IntExpr */
    public R visit(basil_ir.Absyn.IntLiteral p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.RIntVar p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntBinary p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntNeg p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.IntExpr p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* LogExpr */
    public R visit(basil_ir.Absyn.BVLogBinary p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.RLogVar p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolLit p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntLogBinary p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolLogBinOp p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolNot p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.LogExpr p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* IntRVar */
    public R visit(basil_ir.Absyn.IRV p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.IntRVar p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BVRVar */
    public R visit(basil_ir.Absyn.BVRV p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BVRVar p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BoolRVar */
    public R visit(basil_ir.Absyn.BRV p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BoolRVar p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BoolLiteral */
    public R visit(basil_ir.Absyn.BoolLiteral_true p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolLiteral_false p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BoolLiteral p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BVUnOp */
    public R visit(basil_ir.Absyn.BVUnOp_bvnot p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVUnOp_bvneg p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BVUnOp p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BVBinOp */
    public R visit(basil_ir.Absyn.BVBinOp_bvand p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvor p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvadd p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvmul p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvudiv p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvurem p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvshl p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvlshr p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvnand p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvnor p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvxor p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvxnor p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvcomp p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvsub p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvsdiv p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvsrem p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvsmod p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVBinOp_bvashr p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BVBinOp p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BVLogicalBinOp */
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvule p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvugt p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvuge p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvslt p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvsle p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvsgt p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvsge p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bveq p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvneq p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvult p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BVLogicalBinOp p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* IntBinOp */
    public R visit(basil_ir.Absyn.IntBinOp_intadd p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntBinOp_intmul p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntBinOp_intsub p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntBinOp_intdiv p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntBinOp_intmod p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.IntBinOp p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* IntLogicalBinOp */
    public R visit(basil_ir.Absyn.IntLogicalBinOp_inteq p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intneq p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intlt p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intle p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intgt p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intge p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.IntLogicalBinOp p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* BoolBinOp */
    public R visit(basil_ir.Absyn.BoolBinOp_booleq p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolBinOp_boolneq p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolBinOp_booland p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolBinOp_boolor p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolBinOp_boolimplies p, A arg) { return visitDefault(p, arg); }
    public R visit(basil_ir.Absyn.BoolBinOp_boolequiv p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(basil_ir.Absyn.BoolBinOp p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }

}

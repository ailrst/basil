// File generated by the BNF Converter (bnfc 2.9.5).

package basil_ir;

/** Fold Visitor */
public abstract class FoldVisitor<R,A> implements AllVisitor<R,A> {
    public abstract R leaf(A arg);
    public abstract R combine(R x, R y, A arg);

/* Program */
    public R visit(basil_ir.Absyn.Prog p, A arg) {
      R r = leaf(arg);
      for (basil_ir.Absyn.Declaration x : p.listdeclaration_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }

/* Declaration */
    public R visit(basil_ir.Absyn.LetDecl p, A arg) {
      R r = leaf(arg);
      r = combine(p.mexpr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.MemDecl p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.VarDecl p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.Procedure p, A arg) {
      R r = leaf(arg);
      for (basil_ir.Absyn.Params x : p.listparams_1)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      for (basil_ir.Absyn.Params x : p.listparams_2)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.procdef_.accept(this, arg), r, arg);
      return r;
    }

/* MExpr */
    public R visit(basil_ir.Absyn.MSym p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BlockM p, A arg) {
      R r = leaf(arg);
      r = combine(p.block_.accept(this, arg), r, arg);
      return r;
    }

/* IntType */
    public R visit(basil_ir.Absyn.IntT p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* BoolType */
    public R visit(basil_ir.Absyn.BoolT p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* MapType */
    public R visit(basil_ir.Absyn.MapT p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_1.accept(this, arg), r, arg);
      r = combine(p.type_2.accept(this, arg), r, arg);
      return r;
    }

/* BVType */
    public R visit(basil_ir.Absyn.ShortBVT p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BitvectorType p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlit_.accept(this, arg), r, arg);
      return r;
    }

/* Type */
    public R visit(basil_ir.Absyn.TypeIntType p, A arg) {
      R r = leaf(arg);
      r = combine(p.inttype_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.TypeBoolType p, A arg) {
      R r = leaf(arg);
      r = combine(p.booltype_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.TypeMapType p, A arg) {
      R r = leaf(arg);
      r = combine(p.maptype_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.TypeBVType p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvtype_.accept(this, arg), r, arg);
      return r;
    }

/* IntLit */
    public R visit(basil_ir.Absyn.HexInt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.DecInt p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* AddrAttr */
    public R visit(basil_ir.Absyn.AddrAttrSome p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlit_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.AddrAttrNone p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.AddrAttrEmpty p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* Endian */
    public R visit(basil_ir.Absyn.LittleEndian p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BigEndian p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* Statement */
    public R visit(basil_ir.Absyn.AssignStmt p, A arg) {
      R r = leaf(arg);
      r = combine(p.assign_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.SLoad p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvlvar_.accept(this, arg), r, arg);
      r = combine(p.endian_.accept(this, arg), r, arg);
      r = combine(p.bvexpr_.accept(this, arg), r, arg);
      r = combine(p.intlit_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.SStore p, A arg) {
      R r = leaf(arg);
      r = combine(p.endian_.accept(this, arg), r, arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      r = combine(p.bvexpr_.accept(this, arg), r, arg);
      r = combine(p.intlit_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.DirectCall p, A arg) {
      R r = leaf(arg);
      for (basil_ir.Absyn.Expr x : p.listexpr_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(basil_ir.Absyn.DirectCallReturnLocal p, A arg) {
      R r = leaf(arg);
      for (basil_ir.Absyn.LVar x : p.listlvar_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      for (basil_ir.Absyn.Expr x : p.listexpr_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(basil_ir.Absyn.DirectCallReturn p, A arg) {
      R r = leaf(arg);
      for (basil_ir.Absyn.LVar x : p.listlvar_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      for (basil_ir.Absyn.Expr x : p.listexpr_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(basil_ir.Absyn.IndirectCall p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.Assume p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.Assert p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }

/* Assign */
    public R visit(basil_ir.Absyn.IntAssign p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlvar_.accept(this, arg), r, arg);
      r = combine(p.intexpr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVAssign p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvlvar_.accept(this, arg), r, arg);
      r = combine(p.bvexpr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolAssign p, A arg) {
      R r = leaf(arg);
      r = combine(p.boollvar_.accept(this, arg), r, arg);
      r = combine(p.logexpr_.accept(this, arg), r, arg);
      return r;
    }

/* Jump */
    public R visit(basil_ir.Absyn.GoTo p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.Unreachable p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.Return p, A arg) {
      R r = leaf(arg);
      for (basil_ir.Absyn.Expr x : p.listexpr_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }

/* LVar */
    public R visit(basil_ir.Absyn.LVarIntLVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlvar_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.LVarBVLVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvlvar_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.LVarBoolLVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.boollvar_.accept(this, arg), r, arg);
      return r;
    }

/* BVLVar */
    public R visit(basil_ir.Absyn.LocalBVLVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvtype_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.GlobalBVLVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvtype_.accept(this, arg), r, arg);
      return r;
    }

/* IntLVar */
    public R visit(basil_ir.Absyn.LocalIntLVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.inttype_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.GlobalIntLVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.inttype_.accept(this, arg), r, arg);
      return r;
    }

/* BoolLVar */
    public R visit(basil_ir.Absyn.LocalBoolLVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.booltype_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.GlobalBoolLVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.booltype_.accept(this, arg), r, arg);
      return r;
    }

/* Block */
    public R visit(basil_ir.Absyn.B p, A arg) {
      R r = leaf(arg);
      r = combine(p.addrattr_.accept(this, arg), r, arg);
      for (basil_ir.Absyn.Statement x : p.liststatement_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.jump_.accept(this, arg), r, arg);
      return r;
    }

/* PEntry */
    public R visit(basil_ir.Absyn.EntrySome p, A arg) {
      R r = leaf(arg);
      r = combine(p.block_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.EntryNone p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* PExit */
    public R visit(basil_ir.Absyn.ESome p, A arg) {
      R r = leaf(arg);
      r = combine(p.block_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.ENone p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* PAddress */
    public R visit(basil_ir.Absyn.AddrSome p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlit_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.AddrNone p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* InternalBlocks */
    public R visit(basil_ir.Absyn.BSome p, A arg) {
      R r = leaf(arg);
      for (basil_ir.Absyn.Block x : p.listblock_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }
    public R visit(basil_ir.Absyn.BNone p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* ProcDef */
    public R visit(basil_ir.Absyn.PD p, A arg) {
      R r = leaf(arg);
      r = combine(p.paddress_.accept(this, arg), r, arg);
      r = combine(p.pentry_.accept(this, arg), r, arg);
      r = combine(p.pexit_.accept(this, arg), r, arg);
      r = combine(p.internalblocks_.accept(this, arg), r, arg);
      return r;
    }

/* Params */
    public R visit(basil_ir.Absyn.Param p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }

/* Expr */
    public R visit(basil_ir.Absyn.BitvectorExpr p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvexpr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.LogicalExpr p, A arg) {
      R r = leaf(arg);
      r = combine(p.logexpr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntegerExpr p, A arg) {
      R r = leaf(arg);
      r = combine(p.intexpr_.accept(this, arg), r, arg);
      return r;
    }

/* BVExpr */
    public R visit(basil_ir.Absyn.BVBinary p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvbinop_.accept(this, arg), r, arg);
      r = combine(p.bvexpr_1.accept(this, arg), r, arg);
      r = combine(p.bvexpr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVUnary p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvunop_.accept(this, arg), r, arg);
      r = combine(p.bvexpr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.ZeroExtend p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlit_.accept(this, arg), r, arg);
      r = combine(p.bvexpr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.SignExtend p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlit_.accept(this, arg), r, arg);
      r = combine(p.bvexpr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.Extract p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlit_1.accept(this, arg), r, arg);
      r = combine(p.intlit_2.accept(this, arg), r, arg);
      r = combine(p.bvexpr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.Concat p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvexpr_1.accept(this, arg), r, arg);
      r = combine(p.bvexpr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLiteral p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlit_.accept(this, arg), r, arg);
      r = combine(p.bvtype_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.RBVVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvrvar_.accept(this, arg), r, arg);
      return r;
    }

/* IntExpr */
    public R visit(basil_ir.Absyn.IntLiteral p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlit_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.RIntVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.intrvar_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntBinary p, A arg) {
      R r = leaf(arg);
      r = combine(p.intbinop_.accept(this, arg), r, arg);
      r = combine(p.intexpr_1.accept(this, arg), r, arg);
      r = combine(p.intexpr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntNeg p, A arg) {
      R r = leaf(arg);
      r = combine(p.intexpr_.accept(this, arg), r, arg);
      return r;
    }

/* LogExpr */
    public R visit(basil_ir.Absyn.BVLogBinary p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvlogicalbinop_.accept(this, arg), r, arg);
      r = combine(p.bvexpr_1.accept(this, arg), r, arg);
      r = combine(p.bvexpr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.RLogVar p, A arg) {
      R r = leaf(arg);
      r = combine(p.boolrvar_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolLit p, A arg) {
      R r = leaf(arg);
      r = combine(p.boolliteral_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntLogBinary p, A arg) {
      R r = leaf(arg);
      r = combine(p.intlogicalbinop_.accept(this, arg), r, arg);
      r = combine(p.intexpr_1.accept(this, arg), r, arg);
      r = combine(p.intexpr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolLogBinOp p, A arg) {
      R r = leaf(arg);
      r = combine(p.boolbinop_.accept(this, arg), r, arg);
      r = combine(p.logexpr_1.accept(this, arg), r, arg);
      r = combine(p.logexpr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolNot p, A arg) {
      R r = leaf(arg);
      r = combine(p.logexpr_.accept(this, arg), r, arg);
      return r;
    }

/* IntRVar */
    public R visit(basil_ir.Absyn.IRV p, A arg) {
      R r = leaf(arg);
      r = combine(p.inttype_.accept(this, arg), r, arg);
      return r;
    }

/* BVRVar */
    public R visit(basil_ir.Absyn.BVRV p, A arg) {
      R r = leaf(arg);
      r = combine(p.bvtype_.accept(this, arg), r, arg);
      return r;
    }

/* BoolRVar */
    public R visit(basil_ir.Absyn.BRV p, A arg) {
      R r = leaf(arg);
      r = combine(p.booltype_.accept(this, arg), r, arg);
      return r;
    }

/* BoolLiteral */
    public R visit(basil_ir.Absyn.BoolLiteral_true p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolLiteral_false p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* BVUnOp */
    public R visit(basil_ir.Absyn.BVUnOp_bvnot p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVUnOp_bvneg p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* BVBinOp */
    public R visit(basil_ir.Absyn.BVBinOp_bvand p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvor p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvadd p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvmul p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvudiv p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvurem p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvshl p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvlshr p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvnand p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvnor p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvxor p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvxnor p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvcomp p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvsub p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvsdiv p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvsrem p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvsmod p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvashr p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* BVLogicalBinOp */
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvule p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvugt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvuge p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvslt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvsle p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvsgt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvsge p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bveq p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvneq p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvult p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* IntBinOp */
    public R visit(basil_ir.Absyn.IntBinOp_intadd p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntBinOp_intmul p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntBinOp_intsub p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntBinOp_intdiv p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntBinOp_intmod p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* IntLogicalBinOp */
    public R visit(basil_ir.Absyn.IntLogicalBinOp_inteq p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intneq p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intlt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intle p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intgt p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intge p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* BoolBinOp */
    public R visit(basil_ir.Absyn.BoolBinOp_booleq p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_boolneq p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_booland p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_boolor p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_boolimplies p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_boolequiv p, A arg) {
      R r = leaf(arg);
      return r;
    }


}

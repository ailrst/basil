// File generated by the BNF Converter (bnfc 2.9.5).

package basil_ir;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  basil_ir.Absyn.Program.Visitor<basil_ir.Absyn.Program,A>,
  basil_ir.Absyn.Declaration.Visitor<basil_ir.Absyn.Declaration,A>,
  basil_ir.Absyn.MExpr.Visitor<basil_ir.Absyn.MExpr,A>,
  basil_ir.Absyn.IntType.Visitor<basil_ir.Absyn.IntType,A>,
  basil_ir.Absyn.BoolType.Visitor<basil_ir.Absyn.BoolType,A>,
  basil_ir.Absyn.MapType.Visitor<basil_ir.Absyn.MapType,A>,
  basil_ir.Absyn.BVType.Visitor<basil_ir.Absyn.BVType,A>,
  basil_ir.Absyn.Type.Visitor<basil_ir.Absyn.Type,A>,
  basil_ir.Absyn.IntLit.Visitor<basil_ir.Absyn.IntLit,A>,
  basil_ir.Absyn.AddrAttr.Visitor<basil_ir.Absyn.AddrAttr,A>,
  basil_ir.Absyn.Endian.Visitor<basil_ir.Absyn.Endian,A>,
  basil_ir.Absyn.Statement.Visitor<basil_ir.Absyn.Statement,A>,
  basil_ir.Absyn.Assign.Visitor<basil_ir.Absyn.Assign,A>,
  basil_ir.Absyn.Jump.Visitor<basil_ir.Absyn.Jump,A>,
  basil_ir.Absyn.LVar.Visitor<basil_ir.Absyn.LVar,A>,
  basil_ir.Absyn.BVLVar.Visitor<basil_ir.Absyn.BVLVar,A>,
  basil_ir.Absyn.IntLVar.Visitor<basil_ir.Absyn.IntLVar,A>,
  basil_ir.Absyn.BoolLVar.Visitor<basil_ir.Absyn.BoolLVar,A>,
  basil_ir.Absyn.Block.Visitor<basil_ir.Absyn.Block,A>,
  basil_ir.Absyn.PEntry.Visitor<basil_ir.Absyn.PEntry,A>,
  basil_ir.Absyn.PExit.Visitor<basil_ir.Absyn.PExit,A>,
  basil_ir.Absyn.PAddress.Visitor<basil_ir.Absyn.PAddress,A>,
  basil_ir.Absyn.InternalBlocks.Visitor<basil_ir.Absyn.InternalBlocks,A>,
  basil_ir.Absyn.ProcDef.Visitor<basil_ir.Absyn.ProcDef,A>,
  basil_ir.Absyn.Params.Visitor<basil_ir.Absyn.Params,A>,
  basil_ir.Absyn.Expr.Visitor<basil_ir.Absyn.Expr,A>,
  basil_ir.Absyn.BVExpr.Visitor<basil_ir.Absyn.BVExpr,A>,
  basil_ir.Absyn.IntExpr.Visitor<basil_ir.Absyn.IntExpr,A>,
  basil_ir.Absyn.LogExpr.Visitor<basil_ir.Absyn.LogExpr,A>,
  basil_ir.Absyn.IntRVar.Visitor<basil_ir.Absyn.IntRVar,A>,
  basil_ir.Absyn.BVRVar.Visitor<basil_ir.Absyn.BVRVar,A>,
  basil_ir.Absyn.BoolRVar.Visitor<basil_ir.Absyn.BoolRVar,A>,
  basil_ir.Absyn.BoolLiteral.Visitor<basil_ir.Absyn.BoolLiteral,A>,
  basil_ir.Absyn.BVUnOp.Visitor<basil_ir.Absyn.BVUnOp,A>,
  basil_ir.Absyn.BVBinOp.Visitor<basil_ir.Absyn.BVBinOp,A>,
  basil_ir.Absyn.BVLogicalBinOp.Visitor<basil_ir.Absyn.BVLogicalBinOp,A>,
  basil_ir.Absyn.IntBinOp.Visitor<basil_ir.Absyn.IntBinOp,A>,
  basil_ir.Absyn.IntLogicalBinOp.Visitor<basil_ir.Absyn.IntLogicalBinOp,A>,
  basil_ir.Absyn.BoolBinOp.Visitor<basil_ir.Absyn.BoolBinOp,A>
{
    /* Program */
    public basil_ir.Absyn.Program visit(basil_ir.Absyn.Prog p, A arg)
    {
      basil_ir.Absyn.ListDeclaration listdeclaration_ = new basil_ir.Absyn.ListDeclaration();
      for (basil_ir.Absyn.Declaration x : p.listdeclaration_)
      {
        listdeclaration_.add(x.accept(this,arg));
      }
      return new basil_ir.Absyn.Prog(listdeclaration_);
    }

    /* Declaration */
    public basil_ir.Absyn.Declaration visit(basil_ir.Absyn.LetDecl p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.MExpr mexpr_ = p.mexpr_.accept(this, arg);
      return new basil_ir.Absyn.LetDecl(bident_, mexpr_);
    }
    public basil_ir.Absyn.Declaration visit(basil_ir.Absyn.MemDecl p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.Type type_ = p.type_.accept(this, arg);
      return new basil_ir.Absyn.MemDecl(bident_, type_);
    }
    public basil_ir.Absyn.Declaration visit(basil_ir.Absyn.VarDecl p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.Type type_ = p.type_.accept(this, arg);
      return new basil_ir.Absyn.VarDecl(bident_, type_);
    }
    public basil_ir.Absyn.Declaration visit(basil_ir.Absyn.Procedure p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.ListParams listparams_1 = new basil_ir.Absyn.ListParams();
      for (basil_ir.Absyn.Params x : p.listparams_1)
      {
        listparams_1.add(x.accept(this,arg));
      }
      basil_ir.Absyn.ListParams listparams_2 = new basil_ir.Absyn.ListParams();
      for (basil_ir.Absyn.Params x : p.listparams_2)
      {
        listparams_2.add(x.accept(this,arg));
      }
      basil_ir.Absyn.ProcDef procdef_ = p.procdef_.accept(this, arg);
      return new basil_ir.Absyn.Procedure(bident_, listparams_1, listparams_2, procdef_);
    }

    /* MExpr */
    public basil_ir.Absyn.MExpr visit(basil_ir.Absyn.MSym p, A arg)
    {
      String bident_ = p.bident_;
      return new basil_ir.Absyn.MSym(bident_);
    }
    public basil_ir.Absyn.MExpr visit(basil_ir.Absyn.BlockM p, A arg)
    {
      basil_ir.Absyn.Block block_ = p.block_.accept(this, arg);
      return new basil_ir.Absyn.BlockM(block_);
    }

    /* IntType */
    public basil_ir.Absyn.IntType visit(basil_ir.Absyn.IntT p, A arg)
    {
      return new basil_ir.Absyn.IntT();
    }

    /* BoolType */
    public basil_ir.Absyn.BoolType visit(basil_ir.Absyn.BoolT p, A arg)
    {
      return new basil_ir.Absyn.BoolT();
    }

    /* MapType */
    public basil_ir.Absyn.MapType visit(basil_ir.Absyn.MapT p, A arg)
    {
      basil_ir.Absyn.Type type_1 = p.type_1.accept(this, arg);
      basil_ir.Absyn.Type type_2 = p.type_2.accept(this, arg);
      return new basil_ir.Absyn.MapT(type_1, type_2);
    }

    /* BVType */
    public basil_ir.Absyn.BVType visit(basil_ir.Absyn.ShortBVT p, A arg)
    {
      String bvtype_ = p.bvtype_;
      return new basil_ir.Absyn.ShortBVT(bvtype_);
    }
    public basil_ir.Absyn.BVType visit(basil_ir.Absyn.BitvectorType p, A arg)
    {
      basil_ir.Absyn.IntLit intlit_ = p.intlit_.accept(this, arg);
      return new basil_ir.Absyn.BitvectorType(intlit_);
    }

    /* Type */
    public basil_ir.Absyn.Type visit(basil_ir.Absyn.TypeIntType p, A arg)
    {
      basil_ir.Absyn.IntType inttype_ = p.inttype_.accept(this, arg);
      return new basil_ir.Absyn.TypeIntType(inttype_);
    }
    public basil_ir.Absyn.Type visit(basil_ir.Absyn.TypeBoolType p, A arg)
    {
      basil_ir.Absyn.BoolType booltype_ = p.booltype_.accept(this, arg);
      return new basil_ir.Absyn.TypeBoolType(booltype_);
    }
    public basil_ir.Absyn.Type visit(basil_ir.Absyn.TypeMapType p, A arg)
    {
      basil_ir.Absyn.MapType maptype_ = p.maptype_.accept(this, arg);
      return new basil_ir.Absyn.TypeMapType(maptype_);
    }
    public basil_ir.Absyn.Type visit(basil_ir.Absyn.TypeBVType p, A arg)
    {
      basil_ir.Absyn.BVType bvtype_ = p.bvtype_.accept(this, arg);
      return new basil_ir.Absyn.TypeBVType(bvtype_);
    }

    /* IntLit */
    public basil_ir.Absyn.IntLit visit(basil_ir.Absyn.HexInt p, A arg)
    {
      String integerhex_ = p.integerhex_;
      return new basil_ir.Absyn.HexInt(integerhex_);
    }
    public basil_ir.Absyn.IntLit visit(basil_ir.Absyn.DecInt p, A arg)
    {
      Integer integer_ = p.integer_;
      return new basil_ir.Absyn.DecInt(integer_);
    }

    /* AddrAttr */
    public basil_ir.Absyn.AddrAttr visit(basil_ir.Absyn.AddrAttrSome p, A arg)
    {
      basil_ir.Absyn.IntLit intlit_ = p.intlit_.accept(this, arg);
      return new basil_ir.Absyn.AddrAttrSome(intlit_);
    }
    public basil_ir.Absyn.AddrAttr visit(basil_ir.Absyn.AddrAttrNone p, A arg)
    {
      return new basil_ir.Absyn.AddrAttrNone();
    }
    public basil_ir.Absyn.AddrAttr visit(basil_ir.Absyn.AddrAttrEmpty p, A arg)
    {
      return new basil_ir.Absyn.AddrAttrEmpty();
    }

    /* Endian */
    public basil_ir.Absyn.Endian visit(basil_ir.Absyn.LittleEndian p, A arg)
    {
      return new basil_ir.Absyn.LittleEndian();
    }
    public basil_ir.Absyn.Endian visit(basil_ir.Absyn.BigEndian p, A arg)
    {
      return new basil_ir.Absyn.BigEndian();
    }

    /* Statement */
    public basil_ir.Absyn.Statement visit(basil_ir.Absyn.AssignStmt p, A arg)
    {
      basil_ir.Absyn.Assign assign_ = p.assign_.accept(this, arg);
      return new basil_ir.Absyn.AssignStmt(assign_);
    }
    public basil_ir.Absyn.Statement visit(basil_ir.Absyn.SLoad p, A arg)
    {
      basil_ir.Absyn.BVLVar bvlvar_ = p.bvlvar_.accept(this, arg);
      basil_ir.Absyn.Endian endian_ = p.endian_.accept(this, arg);
      String bident_ = p.bident_;
      basil_ir.Absyn.BVExpr bvexpr_ = p.bvexpr_.accept(this, arg);
      basil_ir.Absyn.IntLit intlit_ = p.intlit_.accept(this, arg);
      return new basil_ir.Absyn.SLoad(bvlvar_, endian_, bident_, bvexpr_, intlit_);
    }
    public basil_ir.Absyn.Statement visit(basil_ir.Absyn.SStore p, A arg)
    {
      basil_ir.Absyn.Endian endian_ = p.endian_.accept(this, arg);
      String bident_ = p.bident_;
      basil_ir.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_ = p.bvexpr_.accept(this, arg);
      basil_ir.Absyn.IntLit intlit_ = p.intlit_.accept(this, arg);
      return new basil_ir.Absyn.SStore(endian_, bident_, expr_, bvexpr_, intlit_);
    }
    public basil_ir.Absyn.Statement visit(basil_ir.Absyn.DirectCall p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.ListExpr listexpr_ = new basil_ir.Absyn.ListExpr();
      for (basil_ir.Absyn.Expr x : p.listexpr_)
      {
        listexpr_.add(x.accept(this,arg));
      }
      return new basil_ir.Absyn.DirectCall(bident_, listexpr_);
    }
    public basil_ir.Absyn.Statement visit(basil_ir.Absyn.DirectCallReturnLocal p, A arg)
    {
      basil_ir.Absyn.ListLVar listlvar_ = new basil_ir.Absyn.ListLVar();
      for (basil_ir.Absyn.LVar x : p.listlvar_)
      {
        listlvar_.add(x.accept(this,arg));
      }
      String bident_ = p.bident_;
      basil_ir.Absyn.ListExpr listexpr_ = new basil_ir.Absyn.ListExpr();
      for (basil_ir.Absyn.Expr x : p.listexpr_)
      {
        listexpr_.add(x.accept(this,arg));
      }
      return new basil_ir.Absyn.DirectCallReturnLocal(listlvar_, bident_, listexpr_);
    }
    public basil_ir.Absyn.Statement visit(basil_ir.Absyn.DirectCallReturn p, A arg)
    {
      basil_ir.Absyn.ListLVar listlvar_ = new basil_ir.Absyn.ListLVar();
      for (basil_ir.Absyn.LVar x : p.listlvar_)
      {
        listlvar_.add(x.accept(this,arg));
      }
      String bident_ = p.bident_;
      basil_ir.Absyn.ListExpr listexpr_ = new basil_ir.Absyn.ListExpr();
      for (basil_ir.Absyn.Expr x : p.listexpr_)
      {
        listexpr_.add(x.accept(this,arg));
      }
      return new basil_ir.Absyn.DirectCallReturn(listlvar_, bident_, listexpr_);
    }
    public basil_ir.Absyn.Statement visit(basil_ir.Absyn.IndirectCall p, A arg)
    {
      basil_ir.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new basil_ir.Absyn.IndirectCall(expr_);
    }
    public basil_ir.Absyn.Statement visit(basil_ir.Absyn.Assume p, A arg)
    {
      basil_ir.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new basil_ir.Absyn.Assume(expr_);
    }
    public basil_ir.Absyn.Statement visit(basil_ir.Absyn.Assert p, A arg)
    {
      basil_ir.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new basil_ir.Absyn.Assert(expr_);
    }

    /* Assign */
    public basil_ir.Absyn.Assign visit(basil_ir.Absyn.IntAssign p, A arg)
    {
      basil_ir.Absyn.IntLVar intlvar_ = p.intlvar_.accept(this, arg);
      basil_ir.Absyn.IntExpr intexpr_ = p.intexpr_.accept(this, arg);
      return new basil_ir.Absyn.IntAssign(intlvar_, intexpr_);
    }
    public basil_ir.Absyn.Assign visit(basil_ir.Absyn.BVAssign p, A arg)
    {
      basil_ir.Absyn.BVLVar bvlvar_ = p.bvlvar_.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_ = p.bvexpr_.accept(this, arg);
      return new basil_ir.Absyn.BVAssign(bvlvar_, bvexpr_);
    }
    public basil_ir.Absyn.Assign visit(basil_ir.Absyn.BoolAssign p, A arg)
    {
      basil_ir.Absyn.BoolLVar boollvar_ = p.boollvar_.accept(this, arg);
      basil_ir.Absyn.LogExpr logexpr_ = p.logexpr_.accept(this, arg);
      return new basil_ir.Absyn.BoolAssign(boollvar_, logexpr_);
    }

    /* Jump */
    public basil_ir.Absyn.Jump visit(basil_ir.Absyn.GoTo p, A arg)
    {
      basil_ir.Absyn.ListBIdent listbident_ = p.listbident_;
      return new basil_ir.Absyn.GoTo(listbident_);
    }
    public basil_ir.Absyn.Jump visit(basil_ir.Absyn.Unreachable p, A arg)
    {
      return new basil_ir.Absyn.Unreachable();
    }
    public basil_ir.Absyn.Jump visit(basil_ir.Absyn.Return p, A arg)
    {
      basil_ir.Absyn.ListExpr listexpr_ = new basil_ir.Absyn.ListExpr();
      for (basil_ir.Absyn.Expr x : p.listexpr_)
      {
        listexpr_.add(x.accept(this,arg));
      }
      return new basil_ir.Absyn.Return(listexpr_);
    }

    /* LVar */
    public basil_ir.Absyn.LVar visit(basil_ir.Absyn.LVarIntLVar p, A arg)
    {
      basil_ir.Absyn.IntLVar intlvar_ = p.intlvar_.accept(this, arg);
      return new basil_ir.Absyn.LVarIntLVar(intlvar_);
    }
    public basil_ir.Absyn.LVar visit(basil_ir.Absyn.LVarBVLVar p, A arg)
    {
      basil_ir.Absyn.BVLVar bvlvar_ = p.bvlvar_.accept(this, arg);
      return new basil_ir.Absyn.LVarBVLVar(bvlvar_);
    }
    public basil_ir.Absyn.LVar visit(basil_ir.Absyn.LVarBoolLVar p, A arg)
    {
      basil_ir.Absyn.BoolLVar boollvar_ = p.boollvar_.accept(this, arg);
      return new basil_ir.Absyn.LVarBoolLVar(boollvar_);
    }

    /* BVLVar */
    public basil_ir.Absyn.BVLVar visit(basil_ir.Absyn.LocalBVLVar p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.BVType bvtype_ = p.bvtype_.accept(this, arg);
      return new basil_ir.Absyn.LocalBVLVar(bident_, bvtype_);
    }
    public basil_ir.Absyn.BVLVar visit(basil_ir.Absyn.GlobalBVLVar p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.BVType bvtype_ = p.bvtype_.accept(this, arg);
      return new basil_ir.Absyn.GlobalBVLVar(bident_, bvtype_);
    }

    /* IntLVar */
    public basil_ir.Absyn.IntLVar visit(basil_ir.Absyn.LocalIntLVar p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.IntType inttype_ = p.inttype_.accept(this, arg);
      return new basil_ir.Absyn.LocalIntLVar(bident_, inttype_);
    }
    public basil_ir.Absyn.IntLVar visit(basil_ir.Absyn.GlobalIntLVar p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.IntType inttype_ = p.inttype_.accept(this, arg);
      return new basil_ir.Absyn.GlobalIntLVar(bident_, inttype_);
    }

    /* BoolLVar */
    public basil_ir.Absyn.BoolLVar visit(basil_ir.Absyn.LocalBoolLVar p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.BoolType booltype_ = p.booltype_.accept(this, arg);
      return new basil_ir.Absyn.LocalBoolLVar(bident_, booltype_);
    }
    public basil_ir.Absyn.BoolLVar visit(basil_ir.Absyn.GlobalBoolLVar p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.BoolType booltype_ = p.booltype_.accept(this, arg);
      return new basil_ir.Absyn.GlobalBoolLVar(bident_, booltype_);
    }

    /* Block */
    public basil_ir.Absyn.Block visit(basil_ir.Absyn.B p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.AddrAttr addrattr_ = p.addrattr_.accept(this, arg);
      basil_ir.Absyn.ListStatement liststatement_ = new basil_ir.Absyn.ListStatement();
      for (basil_ir.Absyn.Statement x : p.liststatement_)
      {
        liststatement_.add(x.accept(this,arg));
      }
      basil_ir.Absyn.Jump jump_ = p.jump_.accept(this, arg);
      return new basil_ir.Absyn.B(bident_, addrattr_, liststatement_, jump_);
    }

    /* PEntry */
    public basil_ir.Absyn.PEntry visit(basil_ir.Absyn.EntrySome p, A arg)
    {
      basil_ir.Absyn.Block block_ = p.block_.accept(this, arg);
      return new basil_ir.Absyn.EntrySome(block_);
    }
    public basil_ir.Absyn.PEntry visit(basil_ir.Absyn.EntryNone p, A arg)
    {
      return new basil_ir.Absyn.EntryNone();
    }

    /* PExit */
    public basil_ir.Absyn.PExit visit(basil_ir.Absyn.ESome p, A arg)
    {
      basil_ir.Absyn.Block block_ = p.block_.accept(this, arg);
      return new basil_ir.Absyn.ESome(block_);
    }
    public basil_ir.Absyn.PExit visit(basil_ir.Absyn.ENone p, A arg)
    {
      return new basil_ir.Absyn.ENone();
    }

    /* PAddress */
    public basil_ir.Absyn.PAddress visit(basil_ir.Absyn.AddrSome p, A arg)
    {
      basil_ir.Absyn.IntLit intlit_ = p.intlit_.accept(this, arg);
      return new basil_ir.Absyn.AddrSome(intlit_);
    }
    public basil_ir.Absyn.PAddress visit(basil_ir.Absyn.AddrNone p, A arg)
    {
      return new basil_ir.Absyn.AddrNone();
    }

    /* InternalBlocks */
    public basil_ir.Absyn.InternalBlocks visit(basil_ir.Absyn.BSome p, A arg)
    {
      basil_ir.Absyn.ListBlock listblock_ = new basil_ir.Absyn.ListBlock();
      for (basil_ir.Absyn.Block x : p.listblock_)
      {
        listblock_.add(x.accept(this,arg));
      }
      return new basil_ir.Absyn.BSome(listblock_);
    }
    public basil_ir.Absyn.InternalBlocks visit(basil_ir.Absyn.BNone p, A arg)
    {
      return new basil_ir.Absyn.BNone();
    }

    /* ProcDef */
    public basil_ir.Absyn.ProcDef visit(basil_ir.Absyn.PD p, A arg)
    {
      String str_ = p.str_;
      basil_ir.Absyn.PAddress paddress_ = p.paddress_.accept(this, arg);
      basil_ir.Absyn.PEntry pentry_ = p.pentry_.accept(this, arg);
      basil_ir.Absyn.PExit pexit_ = p.pexit_.accept(this, arg);
      basil_ir.Absyn.InternalBlocks internalblocks_ = p.internalblocks_.accept(this, arg);
      return new basil_ir.Absyn.PD(str_, paddress_, pentry_, pexit_, internalblocks_);
    }

    /* Params */
    public basil_ir.Absyn.Params visit(basil_ir.Absyn.Param p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.Type type_ = p.type_.accept(this, arg);
      return new basil_ir.Absyn.Param(bident_, type_);
    }

    /* Expr */
    public basil_ir.Absyn.Expr visit(basil_ir.Absyn.BitvectorExpr p, A arg)
    {
      basil_ir.Absyn.BVExpr bvexpr_ = p.bvexpr_.accept(this, arg);
      return new basil_ir.Absyn.BitvectorExpr(bvexpr_);
    }
    public basil_ir.Absyn.Expr visit(basil_ir.Absyn.LogicalExpr p, A arg)
    {
      basil_ir.Absyn.LogExpr logexpr_ = p.logexpr_.accept(this, arg);
      return new basil_ir.Absyn.LogicalExpr(logexpr_);
    }
    public basil_ir.Absyn.Expr visit(basil_ir.Absyn.IntegerExpr p, A arg)
    {
      basil_ir.Absyn.IntExpr intexpr_ = p.intexpr_.accept(this, arg);
      return new basil_ir.Absyn.IntegerExpr(intexpr_);
    }

    /* BVExpr */
    public basil_ir.Absyn.BVExpr visit(basil_ir.Absyn.BVBinary p, A arg)
    {
      basil_ir.Absyn.BVBinOp bvbinop_ = p.bvbinop_.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_1 = p.bvexpr_1.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_2 = p.bvexpr_2.accept(this, arg);
      return new basil_ir.Absyn.BVBinary(bvbinop_, bvexpr_1, bvexpr_2);
    }
    public basil_ir.Absyn.BVExpr visit(basil_ir.Absyn.BVUnary p, A arg)
    {
      basil_ir.Absyn.BVUnOp bvunop_ = p.bvunop_.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_ = p.bvexpr_.accept(this, arg);
      return new basil_ir.Absyn.BVUnary(bvunop_, bvexpr_);
    }
    public basil_ir.Absyn.BVExpr visit(basil_ir.Absyn.ZeroExtend p, A arg)
    {
      basil_ir.Absyn.IntLit intlit_ = p.intlit_.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_ = p.bvexpr_.accept(this, arg);
      return new basil_ir.Absyn.ZeroExtend(intlit_, bvexpr_);
    }
    public basil_ir.Absyn.BVExpr visit(basil_ir.Absyn.SignExtend p, A arg)
    {
      basil_ir.Absyn.IntLit intlit_ = p.intlit_.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_ = p.bvexpr_.accept(this, arg);
      return new basil_ir.Absyn.SignExtend(intlit_, bvexpr_);
    }
    public basil_ir.Absyn.BVExpr visit(basil_ir.Absyn.Extract p, A arg)
    {
      basil_ir.Absyn.IntLit intlit_1 = p.intlit_1.accept(this, arg);
      basil_ir.Absyn.IntLit intlit_2 = p.intlit_2.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_ = p.bvexpr_.accept(this, arg);
      return new basil_ir.Absyn.Extract(intlit_1, intlit_2, bvexpr_);
    }
    public basil_ir.Absyn.BVExpr visit(basil_ir.Absyn.Concat p, A arg)
    {
      basil_ir.Absyn.BVExpr bvexpr_1 = p.bvexpr_1.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_2 = p.bvexpr_2.accept(this, arg);
      return new basil_ir.Absyn.Concat(bvexpr_1, bvexpr_2);
    }
    public basil_ir.Absyn.BVExpr visit(basil_ir.Absyn.BVLiteral p, A arg)
    {
      basil_ir.Absyn.IntLit intlit_ = p.intlit_.accept(this, arg);
      basil_ir.Absyn.BVType bvtype_ = p.bvtype_.accept(this, arg);
      return new basil_ir.Absyn.BVLiteral(intlit_, bvtype_);
    }
    public basil_ir.Absyn.BVExpr visit(basil_ir.Absyn.RBVVar p, A arg)
    {
      basil_ir.Absyn.BVRVar bvrvar_ = p.bvrvar_.accept(this, arg);
      return new basil_ir.Absyn.RBVVar(bvrvar_);
    }

    /* IntExpr */
    public basil_ir.Absyn.IntExpr visit(basil_ir.Absyn.IntLiteral p, A arg)
    {
      basil_ir.Absyn.IntLit intlit_ = p.intlit_.accept(this, arg);
      return new basil_ir.Absyn.IntLiteral(intlit_);
    }
    public basil_ir.Absyn.IntExpr visit(basil_ir.Absyn.RIntVar p, A arg)
    {
      basil_ir.Absyn.IntRVar intrvar_ = p.intrvar_.accept(this, arg);
      return new basil_ir.Absyn.RIntVar(intrvar_);
    }
    public basil_ir.Absyn.IntExpr visit(basil_ir.Absyn.IntBinary p, A arg)
    {
      basil_ir.Absyn.IntBinOp intbinop_ = p.intbinop_.accept(this, arg);
      basil_ir.Absyn.IntExpr intexpr_1 = p.intexpr_1.accept(this, arg);
      basil_ir.Absyn.IntExpr intexpr_2 = p.intexpr_2.accept(this, arg);
      return new basil_ir.Absyn.IntBinary(intbinop_, intexpr_1, intexpr_2);
    }
    public basil_ir.Absyn.IntExpr visit(basil_ir.Absyn.IntNeg p, A arg)
    {
      basil_ir.Absyn.IntExpr intexpr_ = p.intexpr_.accept(this, arg);
      return new basil_ir.Absyn.IntNeg(intexpr_);
    }

    /* LogExpr */
    public basil_ir.Absyn.LogExpr visit(basil_ir.Absyn.BVLogBinary p, A arg)
    {
      basil_ir.Absyn.BVLogicalBinOp bvlogicalbinop_ = p.bvlogicalbinop_.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_1 = p.bvexpr_1.accept(this, arg);
      basil_ir.Absyn.BVExpr bvexpr_2 = p.bvexpr_2.accept(this, arg);
      return new basil_ir.Absyn.BVLogBinary(bvlogicalbinop_, bvexpr_1, bvexpr_2);
    }
    public basil_ir.Absyn.LogExpr visit(basil_ir.Absyn.RLogVar p, A arg)
    {
      basil_ir.Absyn.BoolRVar boolrvar_ = p.boolrvar_.accept(this, arg);
      return new basil_ir.Absyn.RLogVar(boolrvar_);
    }
    public basil_ir.Absyn.LogExpr visit(basil_ir.Absyn.BoolLit p, A arg)
    {
      basil_ir.Absyn.BoolLiteral boolliteral_ = p.boolliteral_.accept(this, arg);
      return new basil_ir.Absyn.BoolLit(boolliteral_);
    }
    public basil_ir.Absyn.LogExpr visit(basil_ir.Absyn.IntLogBinary p, A arg)
    {
      basil_ir.Absyn.IntLogicalBinOp intlogicalbinop_ = p.intlogicalbinop_.accept(this, arg);
      basil_ir.Absyn.IntExpr intexpr_1 = p.intexpr_1.accept(this, arg);
      basil_ir.Absyn.IntExpr intexpr_2 = p.intexpr_2.accept(this, arg);
      return new basil_ir.Absyn.IntLogBinary(intlogicalbinop_, intexpr_1, intexpr_2);
    }
    public basil_ir.Absyn.LogExpr visit(basil_ir.Absyn.BoolLogBinOp p, A arg)
    {
      basil_ir.Absyn.BoolBinOp boolbinop_ = p.boolbinop_.accept(this, arg);
      basil_ir.Absyn.LogExpr logexpr_1 = p.logexpr_1.accept(this, arg);
      basil_ir.Absyn.LogExpr logexpr_2 = p.logexpr_2.accept(this, arg);
      return new basil_ir.Absyn.BoolLogBinOp(boolbinop_, logexpr_1, logexpr_2);
    }
    public basil_ir.Absyn.LogExpr visit(basil_ir.Absyn.BoolNot p, A arg)
    {
      basil_ir.Absyn.LogExpr logexpr_ = p.logexpr_.accept(this, arg);
      return new basil_ir.Absyn.BoolNot(logexpr_);
    }

    /* IntRVar */
    public basil_ir.Absyn.IntRVar visit(basil_ir.Absyn.IRV p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.IntType inttype_ = p.inttype_.accept(this, arg);
      return new basil_ir.Absyn.IRV(bident_, inttype_);
    }

    /* BVRVar */
    public basil_ir.Absyn.BVRVar visit(basil_ir.Absyn.BVRV p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.BVType bvtype_ = p.bvtype_.accept(this, arg);
      return new basil_ir.Absyn.BVRV(bident_, bvtype_);
    }

    /* BoolRVar */
    public basil_ir.Absyn.BoolRVar visit(basil_ir.Absyn.BRV p, A arg)
    {
      String bident_ = p.bident_;
      basil_ir.Absyn.BoolType booltype_ = p.booltype_.accept(this, arg);
      return new basil_ir.Absyn.BRV(bident_, booltype_);
    }

    /* BoolLiteral */
    public basil_ir.Absyn.BoolLiteral visit(basil_ir.Absyn.BoolLiteral_true p, A arg)
    {
      return new basil_ir.Absyn.BoolLiteral_true();
    }
    public basil_ir.Absyn.BoolLiteral visit(basil_ir.Absyn.BoolLiteral_false p, A arg)
    {
      return new basil_ir.Absyn.BoolLiteral_false();
    }

    /* BVUnOp */
    public basil_ir.Absyn.BVUnOp visit(basil_ir.Absyn.BVUnOp_bvnot p, A arg)
    {
      return new basil_ir.Absyn.BVUnOp_bvnot();
    }
    public basil_ir.Absyn.BVUnOp visit(basil_ir.Absyn.BVUnOp_bvneg p, A arg)
    {
      return new basil_ir.Absyn.BVUnOp_bvneg();
    }

    /* BVBinOp */
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvand p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvand();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvor p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvor();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvadd p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvadd();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvmul p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvmul();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvudiv p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvudiv();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvurem p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvurem();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvshl p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvshl();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvlshr p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvlshr();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvnand p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvnand();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvnor p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvnor();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvxor p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvxor();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvxnor p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvxnor();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvcomp p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvcomp();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvsub p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvsub();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvsdiv p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvsdiv();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvsrem p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvsrem();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvsmod p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvsmod();
    }
    public basil_ir.Absyn.BVBinOp visit(basil_ir.Absyn.BVBinOp_bvashr p, A arg)
    {
      return new basil_ir.Absyn.BVBinOp_bvashr();
    }

    /* BVLogicalBinOp */
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bvule p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bvule();
    }
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bvugt p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bvugt();
    }
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bvuge p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bvuge();
    }
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bvslt p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bvslt();
    }
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bvsle p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bvsle();
    }
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bvsgt p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bvsgt();
    }
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bvsge p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bvsge();
    }
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bveq p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bveq();
    }
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bvneq p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bvneq();
    }
    public basil_ir.Absyn.BVLogicalBinOp visit(basil_ir.Absyn.BVLogicalBinOp_bvult p, A arg)
    {
      return new basil_ir.Absyn.BVLogicalBinOp_bvult();
    }

    /* IntBinOp */
    public basil_ir.Absyn.IntBinOp visit(basil_ir.Absyn.IntBinOp_intadd p, A arg)
    {
      return new basil_ir.Absyn.IntBinOp_intadd();
    }
    public basil_ir.Absyn.IntBinOp visit(basil_ir.Absyn.IntBinOp_intmul p, A arg)
    {
      return new basil_ir.Absyn.IntBinOp_intmul();
    }
    public basil_ir.Absyn.IntBinOp visit(basil_ir.Absyn.IntBinOp_intsub p, A arg)
    {
      return new basil_ir.Absyn.IntBinOp_intsub();
    }
    public basil_ir.Absyn.IntBinOp visit(basil_ir.Absyn.IntBinOp_intdiv p, A arg)
    {
      return new basil_ir.Absyn.IntBinOp_intdiv();
    }
    public basil_ir.Absyn.IntBinOp visit(basil_ir.Absyn.IntBinOp_intmod p, A arg)
    {
      return new basil_ir.Absyn.IntBinOp_intmod();
    }

    /* IntLogicalBinOp */
    public basil_ir.Absyn.IntLogicalBinOp visit(basil_ir.Absyn.IntLogicalBinOp_inteq p, A arg)
    {
      return new basil_ir.Absyn.IntLogicalBinOp_inteq();
    }
    public basil_ir.Absyn.IntLogicalBinOp visit(basil_ir.Absyn.IntLogicalBinOp_intneq p, A arg)
    {
      return new basil_ir.Absyn.IntLogicalBinOp_intneq();
    }
    public basil_ir.Absyn.IntLogicalBinOp visit(basil_ir.Absyn.IntLogicalBinOp_intlt p, A arg)
    {
      return new basil_ir.Absyn.IntLogicalBinOp_intlt();
    }
    public basil_ir.Absyn.IntLogicalBinOp visit(basil_ir.Absyn.IntLogicalBinOp_intle p, A arg)
    {
      return new basil_ir.Absyn.IntLogicalBinOp_intle();
    }
    public basil_ir.Absyn.IntLogicalBinOp visit(basil_ir.Absyn.IntLogicalBinOp_intgt p, A arg)
    {
      return new basil_ir.Absyn.IntLogicalBinOp_intgt();
    }
    public basil_ir.Absyn.IntLogicalBinOp visit(basil_ir.Absyn.IntLogicalBinOp_intge p, A arg)
    {
      return new basil_ir.Absyn.IntLogicalBinOp_intge();
    }

    /* BoolBinOp */
    public basil_ir.Absyn.BoolBinOp visit(basil_ir.Absyn.BoolBinOp_booleq p, A arg)
    {
      return new basil_ir.Absyn.BoolBinOp_booleq();
    }
    public basil_ir.Absyn.BoolBinOp visit(basil_ir.Absyn.BoolBinOp_boolneq p, A arg)
    {
      return new basil_ir.Absyn.BoolBinOp_boolneq();
    }
    public basil_ir.Absyn.BoolBinOp visit(basil_ir.Absyn.BoolBinOp_booland p, A arg)
    {
      return new basil_ir.Absyn.BoolBinOp_booland();
    }
    public basil_ir.Absyn.BoolBinOp visit(basil_ir.Absyn.BoolBinOp_boolor p, A arg)
    {
      return new basil_ir.Absyn.BoolBinOp_boolor();
    }
    public basil_ir.Absyn.BoolBinOp visit(basil_ir.Absyn.BoolBinOp_boolimplies p, A arg)
    {
      return new basil_ir.Absyn.BoolBinOp_boolimplies();
    }
    public basil_ir.Absyn.BoolBinOp visit(basil_ir.Absyn.BoolBinOp_boolequiv p, A arg)
    {
      return new basil_ir.Absyn.BoolBinOp_boolequiv();
    }
}

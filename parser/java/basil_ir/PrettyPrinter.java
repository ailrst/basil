// File generated by the BNF Converter (bnfc 2.9.5).

package basil_ir;

public class PrettyPrinter
{
  //For certain applications increasing the initial size of the buffer may improve performance.
  private static final int INITIAL_BUFFER_SIZE = 128;
  private static final int INDENT_WIDTH = 2;
  //You may wish to change the parentheses used in precedence.
  private static final String _L_PAREN = new String("(");
  private static final String _R_PAREN = new String(")");
  //You may wish to change render
  private static void render(String s)
  {
    if (s.equals("{"))
    {
       onEmptyLine();
       buf_.append(s);
       _n_ = _n_ + INDENT_WIDTH;
       buf_.append("\n");
       indent();
    }
    else if (s.equals("(") || s.equals("["))
       buf_.append(s);
    else if (s.equals(")") || s.equals("]"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals("}"))
    {
       _n_ = _n_ - INDENT_WIDTH;
       onEmptyLine();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals(","))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals(";"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals("")) return;
    else if (s.trim().equals(""))
    {
       backup();
       buf_.append(s);
    }
    else
    {
       buf_.append(s);
       buf_.append(" ");
    }
  }


  //  print and show methods are defined for each category.
  public static String print(basil_ir.Absyn.Program foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Program foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.ListDeclaration foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.ListDeclaration foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.ListBIdent foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.ListBIdent foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.Declaration foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Declaration foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.MExpr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.MExpr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.IntType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.IntType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BoolType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BoolType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.MapType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.MapType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BVType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BVType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.Type foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Type foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.ListExpr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.ListExpr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.IntLit foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.IntLit foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.AddrAttr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.AddrAttr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.Endian foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Endian foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.ListStatement foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.ListStatement foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.Statement foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Statement foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.Assign foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Assign foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.Jump foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Jump foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.LVar foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.LVar foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BVLVar foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BVLVar foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.IntLVar foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.IntLVar foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BoolLVar foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BoolLVar foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.ListLVar foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.ListLVar foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.ListBlock foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.ListBlock foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.Block foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Block foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.PEntry foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.PEntry foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.PExit foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.PExit foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.PAddress foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.PAddress foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.InternalBlocks foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.InternalBlocks foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.ProcDef foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.ProcDef foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.Params foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Params foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.ListParams foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.ListParams foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.Expr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.Expr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BVExpr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BVExpr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.IntExpr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.IntExpr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.LogExpr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.LogExpr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.IntRVar foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.IntRVar foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BVRVar foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BVRVar foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BoolRVar foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BoolRVar foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BoolLiteral foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BoolLiteral foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BVUnOp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BVUnOp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BVBinOp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BVBinOp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BVLogicalBinOp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BVLogicalBinOp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.IntBinOp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.IntBinOp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.IntLogicalBinOp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.IntLogicalBinOp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(basil_ir.Absyn.BoolBinOp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(basil_ir.Absyn.BoolBinOp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  /***   You shouldn't need to change anything beyond this point.   ***/

  private static void pp(basil_ir.Absyn.Program foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.Prog)
    {
       basil_ir.Absyn.Prog _prog = (basil_ir.Absyn.Prog) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_prog.listdeclaration_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.ListDeclaration foo, int _i_)
  {
    ppListDeclaration(foo.iterator(), _i_);
  }

  private static void ppListDeclaration(java.util.Iterator<basil_ir.Absyn.Declaration> it, int _i_)
  {
    if (it.hasNext())
    {
      basil_ir.Absyn.Declaration el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(";"); ppListDeclaration(it, _i_);
      }
    }
  }


  private static void pp(basil_ir.Absyn.ListBIdent foo, int _i_)
  {
    ppListBIdent(foo.iterator(), _i_);
  }

  private static void ppListBIdent(java.util.Iterator<String> it, int _i_)
  {
    if (it.hasNext())
    {
      String el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListBIdent(it, _i_);
      }
    }
  }


  private static void pp(basil_ir.Absyn.Declaration foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.LetDecl)
    {
       basil_ir.Absyn.LetDecl _letdecl = (basil_ir.Absyn.LetDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("let");
       pp(_letdecl.bident_, 0);
       render("=");
       pp(_letdecl.mexpr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.MemDecl)
    {
       basil_ir.Absyn.MemDecl _memdecl = (basil_ir.Absyn.MemDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("memory");
       pp(_memdecl.bident_, 0);
       render(":");
       pp(_memdecl.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.VarDecl)
    {
       basil_ir.Absyn.VarDecl _vardecl = (basil_ir.Absyn.VarDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("var");
       pp(_vardecl.bident_, 0);
       render(":");
       pp(_vardecl.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.Procedure)
    {
       basil_ir.Absyn.Procedure _procedure = (basil_ir.Absyn.Procedure) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("proc");
       pp(_procedure.bident_, 0);
       render("(");
       pp(_procedure.listparams_1, 0);
       render(")");
       render("->");
       render("(");
       pp(_procedure.listparams_2, 0);
       render(")");
       pp(_procedure.procdef_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.MExpr foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.MSym)
    {
       basil_ir.Absyn.MSym _msym = (basil_ir.Absyn.MSym) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_msym.bident_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BlockM)
    {
       basil_ir.Absyn.BlockM _blockm = (basil_ir.Absyn.BlockM) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_blockm.block_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.IntType foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.IntT)
    {
       basil_ir.Absyn.IntT _intt = (basil_ir.Absyn.IntT) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("int");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BoolType foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BoolT)
    {
       basil_ir.Absyn.BoolT _boolt = (basil_ir.Absyn.BoolT) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bool");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.MapType foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.MapT)
    {
       basil_ir.Absyn.MapT _mapt = (basil_ir.Absyn.MapT) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("map");
       pp(_mapt.type_1, 0);
       render("[");
       pp(_mapt.type_2, 0);
       render("]");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BVType foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.ShortBVT)
    {
       basil_ir.Absyn.ShortBVT _shortbvt = (basil_ir.Absyn.ShortBVT) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_shortbvt.bvtype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BitvectorType)
    {
       basil_ir.Absyn.BitvectorType _bitvectortype = (basil_ir.Absyn.BitvectorType) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bv");
       pp(_bitvectortype.intlit_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.Type foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.TypeIntType)
    {
       basil_ir.Absyn.TypeIntType _typeinttype = (basil_ir.Absyn.TypeIntType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_typeinttype.inttype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.TypeBoolType)
    {
       basil_ir.Absyn.TypeBoolType _typebooltype = (basil_ir.Absyn.TypeBoolType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_typebooltype.booltype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.TypeMapType)
    {
       basil_ir.Absyn.TypeMapType _typemaptype = (basil_ir.Absyn.TypeMapType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_typemaptype.maptype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.TypeBVType)
    {
       basil_ir.Absyn.TypeBVType _typebvtype = (basil_ir.Absyn.TypeBVType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_typebvtype.bvtype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.ListExpr foo, int _i_)
  {
    ppListExpr(foo.iterator(), _i_);
  }

  private static void ppListExpr(java.util.Iterator<basil_ir.Absyn.Expr> it, int _i_)
  {
    if (it.hasNext())
    {
      basil_ir.Absyn.Expr el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListExpr(it, _i_);
      }
    }
  }


  private static void pp(basil_ir.Absyn.IntLit foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.HexInt)
    {
       basil_ir.Absyn.HexInt _hexint = (basil_ir.Absyn.HexInt) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_hexint.integerhex_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.DecInt)
    {
       basil_ir.Absyn.DecInt _decint = (basil_ir.Absyn.DecInt) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_decint.integer_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.AddrAttr foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.AddrAttrSome)
    {
       basil_ir.Absyn.AddrAttrSome _addrattrsome = (basil_ir.Absyn.AddrAttrSome) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("{");
       render("address");
       render("=");
       pp(_addrattrsome.intlit_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.AddrAttrNone)
    {
       basil_ir.Absyn.AddrAttrNone _addrattrnone = (basil_ir.Absyn.AddrAttrNone) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.AddrAttrEmpty)
    {
       basil_ir.Absyn.AddrAttrEmpty _addrattrempty = (basil_ir.Absyn.AddrAttrEmpty) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("{");
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.Endian foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.LittleEndian)
    {
       basil_ir.Absyn.LittleEndian _littleendian = (basil_ir.Absyn.LittleEndian) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("le");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BigEndian)
    {
       basil_ir.Absyn.BigEndian _bigendian = (basil_ir.Absyn.BigEndian) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("be");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.ListStatement foo, int _i_)
  {
    ppListStatement(foo.iterator(), _i_);
  }

  private static void ppListStatement(java.util.Iterator<basil_ir.Absyn.Statement> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      basil_ir.Absyn.Statement el = it.next();
      pp(el, _i_); render(";"); ppListStatement(it, _i_);
    }
  }


  private static void pp(basil_ir.Absyn.Statement foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.AssignStmt)
    {
       basil_ir.Absyn.AssignStmt _assignstmt = (basil_ir.Absyn.AssignStmt) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_assignstmt.assign_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.SLoad)
    {
       basil_ir.Absyn.SLoad _sload = (basil_ir.Absyn.SLoad) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_sload.bvlvar_, 0);
       render(":=");
       render("load");
       pp(_sload.endian_, 0);
       pp(_sload.bident_, 0);
       pp(_sload.bvexpr_, 0);
       pp(_sload.intlit_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.SStore)
    {
       basil_ir.Absyn.SStore _sstore = (basil_ir.Absyn.SStore) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("store");
       pp(_sstore.endian_, 0);
       pp(_sstore.bident_, 0);
       pp(_sstore.expr_, 0);
       pp(_sstore.bvexpr_, 0);
       pp(_sstore.intlit_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.DirectCall)
    {
       basil_ir.Absyn.DirectCall _directcall = (basil_ir.Absyn.DirectCall) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("call");
       pp(_directcall.bident_, 0);
       render("(");
       pp(_directcall.listexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.DirectCallReturnLocal)
    {
       basil_ir.Absyn.DirectCallReturnLocal _directcallreturnlocal = (basil_ir.Absyn.DirectCallReturnLocal) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("var");
       render("(");
       pp(_directcallreturnlocal.listlvar_, 0);
       render(")");
       render(":=");
       render("call");
       pp(_directcallreturnlocal.bident_, 0);
       render("(");
       pp(_directcallreturnlocal.listexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.DirectCallReturn)
    {
       basil_ir.Absyn.DirectCallReturn _directcallreturn = (basil_ir.Absyn.DirectCallReturn) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("(");
       pp(_directcallreturn.listlvar_, 0);
       render(")");
       render(":=");
       render("call");
       pp(_directcallreturn.bident_, 0);
       render("(");
       pp(_directcallreturn.listexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IndirectCall)
    {
       basil_ir.Absyn.IndirectCall _indirectcall = (basil_ir.Absyn.IndirectCall) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("indirect");
       render("call");
       pp(_indirectcall.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.Assume)
    {
       basil_ir.Absyn.Assume _assume = (basil_ir.Absyn.Assume) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("assume");
       pp(_assume.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.Assert)
    {
       basil_ir.Absyn.Assert _assert = (basil_ir.Absyn.Assert) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("assert");
       pp(_assert.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.Assign foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.IntAssign)
    {
       basil_ir.Absyn.IntAssign _intassign = (basil_ir.Absyn.IntAssign) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_intassign.intlvar_, 0);
       render(":=");
       pp(_intassign.intexpr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVAssign)
    {
       basil_ir.Absyn.BVAssign _bvassign = (basil_ir.Absyn.BVAssign) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_bvassign.bvlvar_, 0);
       render(":=");
       pp(_bvassign.bvexpr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolAssign)
    {
       basil_ir.Absyn.BoolAssign _boolassign = (basil_ir.Absyn.BoolAssign) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_boolassign.boollvar_, 0);
       render(":=");
       pp(_boolassign.logexpr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.Jump foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.GoTo)
    {
       basil_ir.Absyn.GoTo _goto = (basil_ir.Absyn.GoTo) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("goto");
       render("(");
       pp(_goto.listbident_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.Unreachable)
    {
       basil_ir.Absyn.Unreachable _unreachable = (basil_ir.Absyn.Unreachable) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("unreachable");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.Return)
    {
       basil_ir.Absyn.Return _return = (basil_ir.Absyn.Return) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("return");
       render("(");
       pp(_return.listexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.LVar foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.LVarIntLVar)
    {
       basil_ir.Absyn.LVarIntLVar _lvarintlvar = (basil_ir.Absyn.LVarIntLVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_lvarintlvar.intlvar_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.LVarBVLVar)
    {
       basil_ir.Absyn.LVarBVLVar _lvarbvlvar = (basil_ir.Absyn.LVarBVLVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_lvarbvlvar.bvlvar_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.LVarBoolLVar)
    {
       basil_ir.Absyn.LVarBoolLVar _lvarboollvar = (basil_ir.Absyn.LVarBoolLVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_lvarboollvar.boollvar_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BVLVar foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.LocalBVLVar)
    {
       basil_ir.Absyn.LocalBVLVar _localbvlvar = (basil_ir.Absyn.LocalBVLVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("var");
       pp(_localbvlvar.bident_, 0);
       render(":");
       pp(_localbvlvar.bvtype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.GlobalBVLVar)
    {
       basil_ir.Absyn.GlobalBVLVar _globalbvlvar = (basil_ir.Absyn.GlobalBVLVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_globalbvlvar.bident_, 0);
       render(":");
       pp(_globalbvlvar.bvtype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.IntLVar foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.LocalIntLVar)
    {
       basil_ir.Absyn.LocalIntLVar _localintlvar = (basil_ir.Absyn.LocalIntLVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("var");
       pp(_localintlvar.bident_, 0);
       render(":");
       pp(_localintlvar.inttype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.GlobalIntLVar)
    {
       basil_ir.Absyn.GlobalIntLVar _globalintlvar = (basil_ir.Absyn.GlobalIntLVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_globalintlvar.bident_, 0);
       render(":");
       pp(_globalintlvar.inttype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BoolLVar foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.LocalBoolLVar)
    {
       basil_ir.Absyn.LocalBoolLVar _localboollvar = (basil_ir.Absyn.LocalBoolLVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("var");
       pp(_localboollvar.bident_, 0);
       render(":");
       pp(_localboollvar.booltype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.GlobalBoolLVar)
    {
       basil_ir.Absyn.GlobalBoolLVar _globalboollvar = (basil_ir.Absyn.GlobalBoolLVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_globalboollvar.bident_, 0);
       render(":");
       pp(_globalboollvar.booltype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.ListLVar foo, int _i_)
  {
    ppListLVar(foo.iterator(), _i_);
  }

  private static void ppListLVar(java.util.Iterator<basil_ir.Absyn.LVar> it, int _i_)
  {
    if (it.hasNext())
    {
      basil_ir.Absyn.LVar el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListLVar(it, _i_);
      }
    }
  }


  private static void pp(basil_ir.Absyn.ListBlock foo, int _i_)
  {
    ppListBlock(foo.iterator(), _i_);
  }

  private static void ppListBlock(java.util.Iterator<basil_ir.Absyn.Block> it, int _i_)
  {
    if (it.hasNext())
    {
      basil_ir.Absyn.Block el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(";"); ppListBlock(it, _i_);
      }
    }
  }


  private static void pp(basil_ir.Absyn.Block foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.B)
    {
       basil_ir.Absyn.B _b = (basil_ir.Absyn.B) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("block");
       pp(_b.bident_, 0);
       pp(_b.addrattr_, 0);
       render("[");
       pp(_b.liststatement_, 0);
       pp(_b.jump_, 0);
       render("]");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.PEntry foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.EntrySome)
    {
       basil_ir.Absyn.EntrySome _entrysome = (basil_ir.Absyn.EntrySome) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("entry");
       render("=");
       pp(_entrysome.block_, 0);
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.EntryNone)
    {
       basil_ir.Absyn.EntryNone _entrynone = (basil_ir.Absyn.EntryNone) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.PExit foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.ESome)
    {
       basil_ir.Absyn.ESome _esome = (basil_ir.Absyn.ESome) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("exit");
       render("=");
       pp(_esome.block_, 0);
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.ENone)
    {
       basil_ir.Absyn.ENone _enone = (basil_ir.Absyn.ENone) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.PAddress foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.AddrSome)
    {
       basil_ir.Absyn.AddrSome _addrsome = (basil_ir.Absyn.AddrSome) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("address");
       render("=");
       pp(_addrsome.intlit_, 0);
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.AddrNone)
    {
       basil_ir.Absyn.AddrNone _addrnone = (basil_ir.Absyn.AddrNone) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.InternalBlocks foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BSome)
    {
       basil_ir.Absyn.BSome _bsome = (basil_ir.Absyn.BSome) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("blocks");
       render("=");
       render("[");
       pp(_bsome.listblock_, 0);
       render("]");
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BNone)
    {
       basil_ir.Absyn.BNone _bnone = (basil_ir.Absyn.BNone) foo;
       if (_i_ > 0) render(_L_PAREN);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.ProcDef foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.PD)
    {
       basil_ir.Absyn.PD _pd = (basil_ir.Absyn.PD) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("{");
       render("name");
       render("=");
       pp(_pd.str_, 0);
       render(";");
       pp(_pd.paddress_, 0);
       pp(_pd.pentry_, 0);
       pp(_pd.pexit_, 0);
       pp(_pd.internalblocks_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.Params foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.Param)
    {
       basil_ir.Absyn.Param _param = (basil_ir.Absyn.Param) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_param.bident_, 0);
       render(":");
       pp(_param.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.ListParams foo, int _i_)
  {
    ppListParams(foo.iterator(), _i_);
  }

  private static void ppListParams(java.util.Iterator<basil_ir.Absyn.Params> it, int _i_)
  {
    if (it.hasNext())
    {
      basil_ir.Absyn.Params el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListParams(it, _i_);
      }
    }
  }


  private static void pp(basil_ir.Absyn.Expr foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BitvectorExpr)
    {
       basil_ir.Absyn.BitvectorExpr _bitvectorexpr = (basil_ir.Absyn.BitvectorExpr) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_bitvectorexpr.bvexpr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.LogicalExpr)
    {
       basil_ir.Absyn.LogicalExpr _logicalexpr = (basil_ir.Absyn.LogicalExpr) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_logicalexpr.logexpr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntegerExpr)
    {
       basil_ir.Absyn.IntegerExpr _integerexpr = (basil_ir.Absyn.IntegerExpr) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_integerexpr.intexpr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BVExpr foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BVBinary)
    {
       basil_ir.Absyn.BVBinary _bvbinary = (basil_ir.Absyn.BVBinary) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_bvbinary.bvbinop_, 0);
       render("(");
       pp(_bvbinary.bvexpr_1, 0);
       render(",");
       pp(_bvbinary.bvexpr_2, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVUnary)
    {
       basil_ir.Absyn.BVUnary _bvunary = (basil_ir.Absyn.BVUnary) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_bvunary.bvunop_, 0);
       render("(");
       pp(_bvunary.bvexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.ZeroExtend)
    {
       basil_ir.Absyn.ZeroExtend _zeroextend = (basil_ir.Absyn.ZeroExtend) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("zero_extend");
       render("(");
       pp(_zeroextend.intlit_, 0);
       render(",");
       pp(_zeroextend.bvexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.SignExtend)
    {
       basil_ir.Absyn.SignExtend _signextend = (basil_ir.Absyn.SignExtend) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("sign_extend");
       render("(");
       pp(_signextend.intlit_, 0);
       render(",");
       pp(_signextend.bvexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.Extract)
    {
       basil_ir.Absyn.Extract _extract = (basil_ir.Absyn.Extract) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("extract");
       render("(");
       pp(_extract.intlit_1, 0);
       render(",");
       pp(_extract.intlit_2, 0);
       render(",");
       pp(_extract.bvexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.Concat)
    {
       basil_ir.Absyn.Concat _concat = (basil_ir.Absyn.Concat) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvconcat");
       render("(");
       pp(_concat.bvexpr_1, 0);
       render(",");
       pp(_concat.bvexpr_2, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLiteral)
    {
       basil_ir.Absyn.BVLiteral _bvliteral = (basil_ir.Absyn.BVLiteral) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_bvliteral.intlit_, 0);
       render(":");
       pp(_bvliteral.bvtype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.RBVVar)
    {
       basil_ir.Absyn.RBVVar _rbvvar = (basil_ir.Absyn.RBVVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_rbvvar.bvrvar_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.IntExpr foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.IntLiteral)
    {
       basil_ir.Absyn.IntLiteral _intliteral = (basil_ir.Absyn.IntLiteral) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_intliteral.intlit_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.RIntVar)
    {
       basil_ir.Absyn.RIntVar _rintvar = (basil_ir.Absyn.RIntVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_rintvar.intrvar_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntBinary)
    {
       basil_ir.Absyn.IntBinary _intbinary = (basil_ir.Absyn.IntBinary) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_intbinary.intbinop_, 0);
       render("(");
       pp(_intbinary.intexpr_1, 0);
       render(",");
       pp(_intbinary.intexpr_2, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntNeg)
    {
       basil_ir.Absyn.IntNeg _intneg = (basil_ir.Absyn.IntNeg) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intneg");
       render("(");
       pp(_intneg.intexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.LogExpr foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BVLogBinary)
    {
       basil_ir.Absyn.BVLogBinary _bvlogbinary = (basil_ir.Absyn.BVLogBinary) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_bvlogbinary.bvlogicalbinop_, 0);
       render("(");
       pp(_bvlogbinary.bvexpr_1, 0);
       render(",");
       pp(_bvlogbinary.bvexpr_2, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.RLogVar)
    {
       basil_ir.Absyn.RLogVar _rlogvar = (basil_ir.Absyn.RLogVar) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_rlogvar.boolrvar_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolLit)
    {
       basil_ir.Absyn.BoolLit _boollit = (basil_ir.Absyn.BoolLit) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_boollit.boolliteral_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntLogBinary)
    {
       basil_ir.Absyn.IntLogBinary _intlogbinary = (basil_ir.Absyn.IntLogBinary) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_intlogbinary.intlogicalbinop_, 0);
       render("(");
       pp(_intlogbinary.intexpr_1, 0);
       render(",");
       pp(_intlogbinary.intexpr_2, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolLogBinOp)
    {
       basil_ir.Absyn.BoolLogBinOp _boollogbinop = (basil_ir.Absyn.BoolLogBinOp) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_boollogbinop.boolbinop_, 0);
       render("(");
       pp(_boollogbinop.logexpr_1, 0);
       render(",");
       pp(_boollogbinop.logexpr_2, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolNot)
    {
       basil_ir.Absyn.BoolNot _boolnot = (basil_ir.Absyn.BoolNot) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("boolnot");
       render("(");
       pp(_boolnot.logexpr_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.IntRVar foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.IRV)
    {
       basil_ir.Absyn.IRV _irv = (basil_ir.Absyn.IRV) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_irv.bident_, 0);
       render(":");
       pp(_irv.inttype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BVRVar foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BVRV)
    {
       basil_ir.Absyn.BVRV _bvrv = (basil_ir.Absyn.BVRV) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_bvrv.bident_, 0);
       render(":");
       pp(_bvrv.bvtype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BoolRVar foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BRV)
    {
       basil_ir.Absyn.BRV _brv = (basil_ir.Absyn.BRV) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_brv.bident_, 0);
       render(":");
       pp(_brv.booltype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BoolLiteral foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BoolLiteral_true)
    {
       basil_ir.Absyn.BoolLiteral_true _boolliteral_true = (basil_ir.Absyn.BoolLiteral_true) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("true");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolLiteral_false)
    {
       basil_ir.Absyn.BoolLiteral_false _boolliteral_false = (basil_ir.Absyn.BoolLiteral_false) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("false");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BVUnOp foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BVUnOp_bvnot)
    {
       basil_ir.Absyn.BVUnOp_bvnot _bvunop_bvnot = (basil_ir.Absyn.BVUnOp_bvnot) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvnot");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVUnOp_bvneg)
    {
       basil_ir.Absyn.BVUnOp_bvneg _bvunop_bvneg = (basil_ir.Absyn.BVUnOp_bvneg) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvneg");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BVBinOp foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvand)
    {
       basil_ir.Absyn.BVBinOp_bvand _bvbinop_bvand = (basil_ir.Absyn.BVBinOp_bvand) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvand");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvor)
    {
       basil_ir.Absyn.BVBinOp_bvor _bvbinop_bvor = (basil_ir.Absyn.BVBinOp_bvor) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvor");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvadd)
    {
       basil_ir.Absyn.BVBinOp_bvadd _bvbinop_bvadd = (basil_ir.Absyn.BVBinOp_bvadd) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvadd");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvmul)
    {
       basil_ir.Absyn.BVBinOp_bvmul _bvbinop_bvmul = (basil_ir.Absyn.BVBinOp_bvmul) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvmul");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvudiv)
    {
       basil_ir.Absyn.BVBinOp_bvudiv _bvbinop_bvudiv = (basil_ir.Absyn.BVBinOp_bvudiv) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvudiv");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvurem)
    {
       basil_ir.Absyn.BVBinOp_bvurem _bvbinop_bvurem = (basil_ir.Absyn.BVBinOp_bvurem) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvurem");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvshl)
    {
       basil_ir.Absyn.BVBinOp_bvshl _bvbinop_bvshl = (basil_ir.Absyn.BVBinOp_bvshl) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvshl");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvlshr)
    {
       basil_ir.Absyn.BVBinOp_bvlshr _bvbinop_bvlshr = (basil_ir.Absyn.BVBinOp_bvlshr) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvlshr");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvnand)
    {
       basil_ir.Absyn.BVBinOp_bvnand _bvbinop_bvnand = (basil_ir.Absyn.BVBinOp_bvnand) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvnand");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvnor)
    {
       basil_ir.Absyn.BVBinOp_bvnor _bvbinop_bvnor = (basil_ir.Absyn.BVBinOp_bvnor) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvnor");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvxor)
    {
       basil_ir.Absyn.BVBinOp_bvxor _bvbinop_bvxor = (basil_ir.Absyn.BVBinOp_bvxor) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvxor");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvxnor)
    {
       basil_ir.Absyn.BVBinOp_bvxnor _bvbinop_bvxnor = (basil_ir.Absyn.BVBinOp_bvxnor) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvxnor");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvcomp)
    {
       basil_ir.Absyn.BVBinOp_bvcomp _bvbinop_bvcomp = (basil_ir.Absyn.BVBinOp_bvcomp) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvcomp");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvsub)
    {
       basil_ir.Absyn.BVBinOp_bvsub _bvbinop_bvsub = (basil_ir.Absyn.BVBinOp_bvsub) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvsub");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvsdiv)
    {
       basil_ir.Absyn.BVBinOp_bvsdiv _bvbinop_bvsdiv = (basil_ir.Absyn.BVBinOp_bvsdiv) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvsdiv");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvsrem)
    {
       basil_ir.Absyn.BVBinOp_bvsrem _bvbinop_bvsrem = (basil_ir.Absyn.BVBinOp_bvsrem) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvsrem");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvsmod)
    {
       basil_ir.Absyn.BVBinOp_bvsmod _bvbinop_bvsmod = (basil_ir.Absyn.BVBinOp_bvsmod) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvsmod");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVBinOp_bvashr)
    {
       basil_ir.Absyn.BVBinOp_bvashr _bvbinop_bvashr = (basil_ir.Absyn.BVBinOp_bvashr) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvashr");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BVLogicalBinOp foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvule)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvule _bvlogicalbinop_bvule = (basil_ir.Absyn.BVLogicalBinOp_bvule) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvule");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvugt)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvugt _bvlogicalbinop_bvugt = (basil_ir.Absyn.BVLogicalBinOp_bvugt) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvugt");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvuge)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvuge _bvlogicalbinop_bvuge = (basil_ir.Absyn.BVLogicalBinOp_bvuge) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvuge");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvslt)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvslt _bvlogicalbinop_bvslt = (basil_ir.Absyn.BVLogicalBinOp_bvslt) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvslt");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvsle)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvsle _bvlogicalbinop_bvsle = (basil_ir.Absyn.BVLogicalBinOp_bvsle) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvsle");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvsgt)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvsgt _bvlogicalbinop_bvsgt = (basil_ir.Absyn.BVLogicalBinOp_bvsgt) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvsgt");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvsge)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvsge _bvlogicalbinop_bvsge = (basil_ir.Absyn.BVLogicalBinOp_bvsge) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvsge");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bveq)
    {
       basil_ir.Absyn.BVLogicalBinOp_bveq _bvlogicalbinop_bveq = (basil_ir.Absyn.BVLogicalBinOp_bveq) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bveq");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvneq)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvneq _bvlogicalbinop_bvneq = (basil_ir.Absyn.BVLogicalBinOp_bvneq) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvneq");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvult)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvult _bvlogicalbinop_bvult = (basil_ir.Absyn.BVLogicalBinOp_bvult) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bvult");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.IntBinOp foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.IntBinOp_intadd)
    {
       basil_ir.Absyn.IntBinOp_intadd _intbinop_intadd = (basil_ir.Absyn.IntBinOp_intadd) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intadd");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntBinOp_intmul)
    {
       basil_ir.Absyn.IntBinOp_intmul _intbinop_intmul = (basil_ir.Absyn.IntBinOp_intmul) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intmul");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntBinOp_intsub)
    {
       basil_ir.Absyn.IntBinOp_intsub _intbinop_intsub = (basil_ir.Absyn.IntBinOp_intsub) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intsub");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntBinOp_intdiv)
    {
       basil_ir.Absyn.IntBinOp_intdiv _intbinop_intdiv = (basil_ir.Absyn.IntBinOp_intdiv) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intdiv");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntBinOp_intmod)
    {
       basil_ir.Absyn.IntBinOp_intmod _intbinop_intmod = (basil_ir.Absyn.IntBinOp_intmod) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intmod");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.IntLogicalBinOp foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_inteq)
    {
       basil_ir.Absyn.IntLogicalBinOp_inteq _intlogicalbinop_inteq = (basil_ir.Absyn.IntLogicalBinOp_inteq) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("inteq");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intneq)
    {
       basil_ir.Absyn.IntLogicalBinOp_intneq _intlogicalbinop_intneq = (basil_ir.Absyn.IntLogicalBinOp_intneq) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intneq");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intlt)
    {
       basil_ir.Absyn.IntLogicalBinOp_intlt _intlogicalbinop_intlt = (basil_ir.Absyn.IntLogicalBinOp_intlt) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intlt");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intle)
    {
       basil_ir.Absyn.IntLogicalBinOp_intle _intlogicalbinop_intle = (basil_ir.Absyn.IntLogicalBinOp_intle) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intle");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intgt)
    {
       basil_ir.Absyn.IntLogicalBinOp_intgt _intlogicalbinop_intgt = (basil_ir.Absyn.IntLogicalBinOp_intgt) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intgt");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intge)
    {
       basil_ir.Absyn.IntLogicalBinOp_intge _intlogicalbinop_intge = (basil_ir.Absyn.IntLogicalBinOp_intge) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("intge");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(basil_ir.Absyn.BoolBinOp foo, int _i_)
  {
    if (foo instanceof basil_ir.Absyn.BoolBinOp_booleq)
    {
       basil_ir.Absyn.BoolBinOp_booleq _boolbinop_booleq = (basil_ir.Absyn.BoolBinOp_booleq) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("booleq");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolBinOp_boolneq)
    {
       basil_ir.Absyn.BoolBinOp_boolneq _boolbinop_boolneq = (basil_ir.Absyn.BoolBinOp_boolneq) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("boolneq");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolBinOp_booland)
    {
       basil_ir.Absyn.BoolBinOp_booland _boolbinop_booland = (basil_ir.Absyn.BoolBinOp_booland) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("booland");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolBinOp_boolor)
    {
       basil_ir.Absyn.BoolBinOp_boolor _boolbinop_boolor = (basil_ir.Absyn.BoolBinOp_boolor) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("boolor");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolBinOp_boolimplies)
    {
       basil_ir.Absyn.BoolBinOp_boolimplies _boolbinop_boolimplies = (basil_ir.Absyn.BoolBinOp_boolimplies) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("boolimplies");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof basil_ir.Absyn.BoolBinOp_boolequiv)
    {
       basil_ir.Absyn.BoolBinOp_boolequiv _boolbinop_boolequiv = (basil_ir.Absyn.BoolBinOp_boolequiv) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("boolequiv");
       if (_i_ > 0) render(_R_PAREN);
    }

  }


  private static void sh(basil_ir.Absyn.Program foo)
  {
    if (foo instanceof basil_ir.Absyn.Prog)
    {
       basil_ir.Absyn.Prog _prog = (basil_ir.Absyn.Prog) foo;
       render("(");
       render("Prog");
       render("[");
       sh(_prog.listdeclaration_);
       render("]");
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.ListDeclaration foo)
  {
     for (java.util.Iterator<basil_ir.Absyn.Declaration> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(basil_ir.Absyn.ListBIdent foo)
  {
     for (java.util.Iterator<String> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(basil_ir.Absyn.Declaration foo)
  {
    if (foo instanceof basil_ir.Absyn.LetDecl)
    {
       basil_ir.Absyn.LetDecl _letdecl = (basil_ir.Absyn.LetDecl) foo;
       render("(");
       render("LetDecl");
       sh(_letdecl.bident_);
       sh(_letdecl.mexpr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.MemDecl)
    {
       basil_ir.Absyn.MemDecl _memdecl = (basil_ir.Absyn.MemDecl) foo;
       render("(");
       render("MemDecl");
       sh(_memdecl.bident_);
       sh(_memdecl.type_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.VarDecl)
    {
       basil_ir.Absyn.VarDecl _vardecl = (basil_ir.Absyn.VarDecl) foo;
       render("(");
       render("VarDecl");
       sh(_vardecl.bident_);
       sh(_vardecl.type_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.Procedure)
    {
       basil_ir.Absyn.Procedure _procedure = (basil_ir.Absyn.Procedure) foo;
       render("(");
       render("Procedure");
       sh(_procedure.bident_);
       render("[");
       sh(_procedure.listparams_1);
       render("]");
       render("[");
       sh(_procedure.listparams_2);
       render("]");
       sh(_procedure.procdef_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.MExpr foo)
  {
    if (foo instanceof basil_ir.Absyn.MSym)
    {
       basil_ir.Absyn.MSym _msym = (basil_ir.Absyn.MSym) foo;
       render("(");
       render("MSym");
       sh(_msym.bident_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BlockM)
    {
       basil_ir.Absyn.BlockM _blockm = (basil_ir.Absyn.BlockM) foo;
       render("(");
       render("BlockM");
       sh(_blockm.block_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.IntType foo)
  {
    if (foo instanceof basil_ir.Absyn.IntT)
    {
       basil_ir.Absyn.IntT _intt = (basil_ir.Absyn.IntT) foo;
       render("IntT");
    }
  }

  private static void sh(basil_ir.Absyn.BoolType foo)
  {
    if (foo instanceof basil_ir.Absyn.BoolT)
    {
       basil_ir.Absyn.BoolT _boolt = (basil_ir.Absyn.BoolT) foo;
       render("BoolT");
    }
  }

  private static void sh(basil_ir.Absyn.MapType foo)
  {
    if (foo instanceof basil_ir.Absyn.MapT)
    {
       basil_ir.Absyn.MapT _mapt = (basil_ir.Absyn.MapT) foo;
       render("(");
       render("MapT");
       sh(_mapt.type_1);
       sh(_mapt.type_2);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.BVType foo)
  {
    if (foo instanceof basil_ir.Absyn.ShortBVT)
    {
       basil_ir.Absyn.ShortBVT _shortbvt = (basil_ir.Absyn.ShortBVT) foo;
       render("(");
       render("ShortBVT");
       sh(_shortbvt.bvtype_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BitvectorType)
    {
       basil_ir.Absyn.BitvectorType _bitvectortype = (basil_ir.Absyn.BitvectorType) foo;
       render("(");
       render("BitvectorType");
       sh(_bitvectortype.intlit_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.Type foo)
  {
    if (foo instanceof basil_ir.Absyn.TypeIntType)
    {
       basil_ir.Absyn.TypeIntType _typeinttype = (basil_ir.Absyn.TypeIntType) foo;
       render("(");
       render("TypeIntType");
       sh(_typeinttype.inttype_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.TypeBoolType)
    {
       basil_ir.Absyn.TypeBoolType _typebooltype = (basil_ir.Absyn.TypeBoolType) foo;
       render("(");
       render("TypeBoolType");
       sh(_typebooltype.booltype_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.TypeMapType)
    {
       basil_ir.Absyn.TypeMapType _typemaptype = (basil_ir.Absyn.TypeMapType) foo;
       render("(");
       render("TypeMapType");
       sh(_typemaptype.maptype_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.TypeBVType)
    {
       basil_ir.Absyn.TypeBVType _typebvtype = (basil_ir.Absyn.TypeBVType) foo;
       render("(");
       render("TypeBVType");
       sh(_typebvtype.bvtype_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.ListExpr foo)
  {
     for (java.util.Iterator<basil_ir.Absyn.Expr> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(basil_ir.Absyn.IntLit foo)
  {
    if (foo instanceof basil_ir.Absyn.HexInt)
    {
       basil_ir.Absyn.HexInt _hexint = (basil_ir.Absyn.HexInt) foo;
       render("(");
       render("HexInt");
       sh(_hexint.integerhex_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.DecInt)
    {
       basil_ir.Absyn.DecInt _decint = (basil_ir.Absyn.DecInt) foo;
       render("(");
       render("DecInt");
       sh(_decint.integer_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.AddrAttr foo)
  {
    if (foo instanceof basil_ir.Absyn.AddrAttrSome)
    {
       basil_ir.Absyn.AddrAttrSome _addrattrsome = (basil_ir.Absyn.AddrAttrSome) foo;
       render("(");
       render("AddrAttrSome");
       sh(_addrattrsome.intlit_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.AddrAttrNone)
    {
       basil_ir.Absyn.AddrAttrNone _addrattrnone = (basil_ir.Absyn.AddrAttrNone) foo;
       render("AddrAttrNone");
    }
    if (foo instanceof basil_ir.Absyn.AddrAttrEmpty)
    {
       basil_ir.Absyn.AddrAttrEmpty _addrattrempty = (basil_ir.Absyn.AddrAttrEmpty) foo;
       render("AddrAttrEmpty");
    }
  }

  private static void sh(basil_ir.Absyn.Endian foo)
  {
    if (foo instanceof basil_ir.Absyn.LittleEndian)
    {
       basil_ir.Absyn.LittleEndian _littleendian = (basil_ir.Absyn.LittleEndian) foo;
       render("LittleEndian");
    }
    if (foo instanceof basil_ir.Absyn.BigEndian)
    {
       basil_ir.Absyn.BigEndian _bigendian = (basil_ir.Absyn.BigEndian) foo;
       render("BigEndian");
    }
  }

  private static void sh(basil_ir.Absyn.ListStatement foo)
  {
     for (java.util.Iterator<basil_ir.Absyn.Statement> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(basil_ir.Absyn.Statement foo)
  {
    if (foo instanceof basil_ir.Absyn.AssignStmt)
    {
       basil_ir.Absyn.AssignStmt _assignstmt = (basil_ir.Absyn.AssignStmt) foo;
       render("(");
       render("AssignStmt");
       sh(_assignstmt.assign_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.SLoad)
    {
       basil_ir.Absyn.SLoad _sload = (basil_ir.Absyn.SLoad) foo;
       render("(");
       render("SLoad");
       sh(_sload.bvlvar_);
       sh(_sload.endian_);
       sh(_sload.bident_);
       sh(_sload.bvexpr_);
       sh(_sload.intlit_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.SStore)
    {
       basil_ir.Absyn.SStore _sstore = (basil_ir.Absyn.SStore) foo;
       render("(");
       render("SStore");
       sh(_sstore.endian_);
       sh(_sstore.bident_);
       sh(_sstore.expr_);
       sh(_sstore.bvexpr_);
       sh(_sstore.intlit_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.DirectCall)
    {
       basil_ir.Absyn.DirectCall _directcall = (basil_ir.Absyn.DirectCall) foo;
       render("(");
       render("DirectCall");
       sh(_directcall.bident_);
       render("[");
       sh(_directcall.listexpr_);
       render("]");
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.DirectCallReturnLocal)
    {
       basil_ir.Absyn.DirectCallReturnLocal _directcallreturnlocal = (basil_ir.Absyn.DirectCallReturnLocal) foo;
       render("(");
       render("DirectCallReturnLocal");
       render("[");
       sh(_directcallreturnlocal.listlvar_);
       render("]");
       sh(_directcallreturnlocal.bident_);
       render("[");
       sh(_directcallreturnlocal.listexpr_);
       render("]");
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.DirectCallReturn)
    {
       basil_ir.Absyn.DirectCallReturn _directcallreturn = (basil_ir.Absyn.DirectCallReturn) foo;
       render("(");
       render("DirectCallReturn");
       render("[");
       sh(_directcallreturn.listlvar_);
       render("]");
       sh(_directcallreturn.bident_);
       render("[");
       sh(_directcallreturn.listexpr_);
       render("]");
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.IndirectCall)
    {
       basil_ir.Absyn.IndirectCall _indirectcall = (basil_ir.Absyn.IndirectCall) foo;
       render("(");
       render("IndirectCall");
       sh(_indirectcall.expr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.Assume)
    {
       basil_ir.Absyn.Assume _assume = (basil_ir.Absyn.Assume) foo;
       render("(");
       render("Assume");
       sh(_assume.expr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.Assert)
    {
       basil_ir.Absyn.Assert _assert = (basil_ir.Absyn.Assert) foo;
       render("(");
       render("Assert");
       sh(_assert.expr_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.Assign foo)
  {
    if (foo instanceof basil_ir.Absyn.IntAssign)
    {
       basil_ir.Absyn.IntAssign _intassign = (basil_ir.Absyn.IntAssign) foo;
       render("(");
       render("IntAssign");
       sh(_intassign.intlvar_);
       sh(_intassign.intexpr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BVAssign)
    {
       basil_ir.Absyn.BVAssign _bvassign = (basil_ir.Absyn.BVAssign) foo;
       render("(");
       render("BVAssign");
       sh(_bvassign.bvlvar_);
       sh(_bvassign.bvexpr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BoolAssign)
    {
       basil_ir.Absyn.BoolAssign _boolassign = (basil_ir.Absyn.BoolAssign) foo;
       render("(");
       render("BoolAssign");
       sh(_boolassign.boollvar_);
       sh(_boolassign.logexpr_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.Jump foo)
  {
    if (foo instanceof basil_ir.Absyn.GoTo)
    {
       basil_ir.Absyn.GoTo _goto = (basil_ir.Absyn.GoTo) foo;
       render("(");
       render("GoTo");
       render("[");
       sh(_goto.listbident_);
       render("]");
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.Unreachable)
    {
       basil_ir.Absyn.Unreachable _unreachable = (basil_ir.Absyn.Unreachable) foo;
       render("Unreachable");
    }
    if (foo instanceof basil_ir.Absyn.Return)
    {
       basil_ir.Absyn.Return _return = (basil_ir.Absyn.Return) foo;
       render("(");
       render("Return");
       render("[");
       sh(_return.listexpr_);
       render("]");
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.LVar foo)
  {
    if (foo instanceof basil_ir.Absyn.LVarIntLVar)
    {
       basil_ir.Absyn.LVarIntLVar _lvarintlvar = (basil_ir.Absyn.LVarIntLVar) foo;
       render("(");
       render("LVarIntLVar");
       sh(_lvarintlvar.intlvar_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.LVarBVLVar)
    {
       basil_ir.Absyn.LVarBVLVar _lvarbvlvar = (basil_ir.Absyn.LVarBVLVar) foo;
       render("(");
       render("LVarBVLVar");
       sh(_lvarbvlvar.bvlvar_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.LVarBoolLVar)
    {
       basil_ir.Absyn.LVarBoolLVar _lvarboollvar = (basil_ir.Absyn.LVarBoolLVar) foo;
       render("(");
       render("LVarBoolLVar");
       sh(_lvarboollvar.boollvar_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.BVLVar foo)
  {
    if (foo instanceof basil_ir.Absyn.LocalBVLVar)
    {
       basil_ir.Absyn.LocalBVLVar _localbvlvar = (basil_ir.Absyn.LocalBVLVar) foo;
       render("(");
       render("LocalBVLVar");
       sh(_localbvlvar.bident_);
       sh(_localbvlvar.bvtype_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.GlobalBVLVar)
    {
       basil_ir.Absyn.GlobalBVLVar _globalbvlvar = (basil_ir.Absyn.GlobalBVLVar) foo;
       render("(");
       render("GlobalBVLVar");
       sh(_globalbvlvar.bident_);
       sh(_globalbvlvar.bvtype_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.IntLVar foo)
  {
    if (foo instanceof basil_ir.Absyn.LocalIntLVar)
    {
       basil_ir.Absyn.LocalIntLVar _localintlvar = (basil_ir.Absyn.LocalIntLVar) foo;
       render("(");
       render("LocalIntLVar");
       sh(_localintlvar.bident_);
       sh(_localintlvar.inttype_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.GlobalIntLVar)
    {
       basil_ir.Absyn.GlobalIntLVar _globalintlvar = (basil_ir.Absyn.GlobalIntLVar) foo;
       render("(");
       render("GlobalIntLVar");
       sh(_globalintlvar.bident_);
       sh(_globalintlvar.inttype_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.BoolLVar foo)
  {
    if (foo instanceof basil_ir.Absyn.LocalBoolLVar)
    {
       basil_ir.Absyn.LocalBoolLVar _localboollvar = (basil_ir.Absyn.LocalBoolLVar) foo;
       render("(");
       render("LocalBoolLVar");
       sh(_localboollvar.bident_);
       sh(_localboollvar.booltype_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.GlobalBoolLVar)
    {
       basil_ir.Absyn.GlobalBoolLVar _globalboollvar = (basil_ir.Absyn.GlobalBoolLVar) foo;
       render("(");
       render("GlobalBoolLVar");
       sh(_globalboollvar.bident_);
       sh(_globalboollvar.booltype_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.ListLVar foo)
  {
     for (java.util.Iterator<basil_ir.Absyn.LVar> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(basil_ir.Absyn.ListBlock foo)
  {
     for (java.util.Iterator<basil_ir.Absyn.Block> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(basil_ir.Absyn.Block foo)
  {
    if (foo instanceof basil_ir.Absyn.B)
    {
       basil_ir.Absyn.B _b = (basil_ir.Absyn.B) foo;
       render("(");
       render("B");
       sh(_b.bident_);
       sh(_b.addrattr_);
       render("[");
       sh(_b.liststatement_);
       render("]");
       sh(_b.jump_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.PEntry foo)
  {
    if (foo instanceof basil_ir.Absyn.EntrySome)
    {
       basil_ir.Absyn.EntrySome _entrysome = (basil_ir.Absyn.EntrySome) foo;
       render("(");
       render("EntrySome");
       sh(_entrysome.block_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.EntryNone)
    {
       basil_ir.Absyn.EntryNone _entrynone = (basil_ir.Absyn.EntryNone) foo;
       render("EntryNone");
    }
  }

  private static void sh(basil_ir.Absyn.PExit foo)
  {
    if (foo instanceof basil_ir.Absyn.ESome)
    {
       basil_ir.Absyn.ESome _esome = (basil_ir.Absyn.ESome) foo;
       render("(");
       render("ESome");
       sh(_esome.block_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.ENone)
    {
       basil_ir.Absyn.ENone _enone = (basil_ir.Absyn.ENone) foo;
       render("ENone");
    }
  }

  private static void sh(basil_ir.Absyn.PAddress foo)
  {
    if (foo instanceof basil_ir.Absyn.AddrSome)
    {
       basil_ir.Absyn.AddrSome _addrsome = (basil_ir.Absyn.AddrSome) foo;
       render("(");
       render("AddrSome");
       sh(_addrsome.intlit_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.AddrNone)
    {
       basil_ir.Absyn.AddrNone _addrnone = (basil_ir.Absyn.AddrNone) foo;
       render("AddrNone");
    }
  }

  private static void sh(basil_ir.Absyn.InternalBlocks foo)
  {
    if (foo instanceof basil_ir.Absyn.BSome)
    {
       basil_ir.Absyn.BSome _bsome = (basil_ir.Absyn.BSome) foo;
       render("(");
       render("BSome");
       render("[");
       sh(_bsome.listblock_);
       render("]");
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BNone)
    {
       basil_ir.Absyn.BNone _bnone = (basil_ir.Absyn.BNone) foo;
       render("BNone");
    }
  }

  private static void sh(basil_ir.Absyn.ProcDef foo)
  {
    if (foo instanceof basil_ir.Absyn.PD)
    {
       basil_ir.Absyn.PD _pd = (basil_ir.Absyn.PD) foo;
       render("(");
       render("PD");
       sh(_pd.str_);
       sh(_pd.paddress_);
       sh(_pd.pentry_);
       sh(_pd.pexit_);
       sh(_pd.internalblocks_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.Params foo)
  {
    if (foo instanceof basil_ir.Absyn.Param)
    {
       basil_ir.Absyn.Param _param = (basil_ir.Absyn.Param) foo;
       render("(");
       render("Param");
       sh(_param.bident_);
       sh(_param.type_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.ListParams foo)
  {
     for (java.util.Iterator<basil_ir.Absyn.Params> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(basil_ir.Absyn.Expr foo)
  {
    if (foo instanceof basil_ir.Absyn.BitvectorExpr)
    {
       basil_ir.Absyn.BitvectorExpr _bitvectorexpr = (basil_ir.Absyn.BitvectorExpr) foo;
       render("(");
       render("BitvectorExpr");
       sh(_bitvectorexpr.bvexpr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.LogicalExpr)
    {
       basil_ir.Absyn.LogicalExpr _logicalexpr = (basil_ir.Absyn.LogicalExpr) foo;
       render("(");
       render("LogicalExpr");
       sh(_logicalexpr.logexpr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.IntegerExpr)
    {
       basil_ir.Absyn.IntegerExpr _integerexpr = (basil_ir.Absyn.IntegerExpr) foo;
       render("(");
       render("IntegerExpr");
       sh(_integerexpr.intexpr_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.BVExpr foo)
  {
    if (foo instanceof basil_ir.Absyn.BVBinary)
    {
       basil_ir.Absyn.BVBinary _bvbinary = (basil_ir.Absyn.BVBinary) foo;
       render("(");
       render("BVBinary");
       sh(_bvbinary.bvbinop_);
       sh(_bvbinary.bvexpr_1);
       sh(_bvbinary.bvexpr_2);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BVUnary)
    {
       basil_ir.Absyn.BVUnary _bvunary = (basil_ir.Absyn.BVUnary) foo;
       render("(");
       render("BVUnary");
       sh(_bvunary.bvunop_);
       sh(_bvunary.bvexpr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.ZeroExtend)
    {
       basil_ir.Absyn.ZeroExtend _zeroextend = (basil_ir.Absyn.ZeroExtend) foo;
       render("(");
       render("ZeroExtend");
       sh(_zeroextend.intlit_);
       sh(_zeroextend.bvexpr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.SignExtend)
    {
       basil_ir.Absyn.SignExtend _signextend = (basil_ir.Absyn.SignExtend) foo;
       render("(");
       render("SignExtend");
       sh(_signextend.intlit_);
       sh(_signextend.bvexpr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.Extract)
    {
       basil_ir.Absyn.Extract _extract = (basil_ir.Absyn.Extract) foo;
       render("(");
       render("Extract");
       sh(_extract.intlit_1);
       sh(_extract.intlit_2);
       sh(_extract.bvexpr_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.Concat)
    {
       basil_ir.Absyn.Concat _concat = (basil_ir.Absyn.Concat) foo;
       render("(");
       render("Concat");
       sh(_concat.bvexpr_1);
       sh(_concat.bvexpr_2);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BVLiteral)
    {
       basil_ir.Absyn.BVLiteral _bvliteral = (basil_ir.Absyn.BVLiteral) foo;
       render("(");
       render("BVLiteral");
       sh(_bvliteral.intlit_);
       sh(_bvliteral.bvtype_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.RBVVar)
    {
       basil_ir.Absyn.RBVVar _rbvvar = (basil_ir.Absyn.RBVVar) foo;
       render("(");
       render("RBVVar");
       sh(_rbvvar.bvrvar_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.IntExpr foo)
  {
    if (foo instanceof basil_ir.Absyn.IntLiteral)
    {
       basil_ir.Absyn.IntLiteral _intliteral = (basil_ir.Absyn.IntLiteral) foo;
       render("(");
       render("IntLiteral");
       sh(_intliteral.intlit_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.RIntVar)
    {
       basil_ir.Absyn.RIntVar _rintvar = (basil_ir.Absyn.RIntVar) foo;
       render("(");
       render("RIntVar");
       sh(_rintvar.intrvar_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.IntBinary)
    {
       basil_ir.Absyn.IntBinary _intbinary = (basil_ir.Absyn.IntBinary) foo;
       render("(");
       render("IntBinary");
       sh(_intbinary.intbinop_);
       sh(_intbinary.intexpr_1);
       sh(_intbinary.intexpr_2);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.IntNeg)
    {
       basil_ir.Absyn.IntNeg _intneg = (basil_ir.Absyn.IntNeg) foo;
       render("(");
       render("IntNeg");
       sh(_intneg.intexpr_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.LogExpr foo)
  {
    if (foo instanceof basil_ir.Absyn.BVLogBinary)
    {
       basil_ir.Absyn.BVLogBinary _bvlogbinary = (basil_ir.Absyn.BVLogBinary) foo;
       render("(");
       render("BVLogBinary");
       sh(_bvlogbinary.bvlogicalbinop_);
       sh(_bvlogbinary.bvexpr_1);
       sh(_bvlogbinary.bvexpr_2);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.RLogVar)
    {
       basil_ir.Absyn.RLogVar _rlogvar = (basil_ir.Absyn.RLogVar) foo;
       render("(");
       render("RLogVar");
       sh(_rlogvar.boolrvar_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BoolLit)
    {
       basil_ir.Absyn.BoolLit _boollit = (basil_ir.Absyn.BoolLit) foo;
       render("(");
       render("BoolLit");
       sh(_boollit.boolliteral_);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.IntLogBinary)
    {
       basil_ir.Absyn.IntLogBinary _intlogbinary = (basil_ir.Absyn.IntLogBinary) foo;
       render("(");
       render("IntLogBinary");
       sh(_intlogbinary.intlogicalbinop_);
       sh(_intlogbinary.intexpr_1);
       sh(_intlogbinary.intexpr_2);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BoolLogBinOp)
    {
       basil_ir.Absyn.BoolLogBinOp _boollogbinop = (basil_ir.Absyn.BoolLogBinOp) foo;
       render("(");
       render("BoolLogBinOp");
       sh(_boollogbinop.boolbinop_);
       sh(_boollogbinop.logexpr_1);
       sh(_boollogbinop.logexpr_2);
       render(")");
    }
    if (foo instanceof basil_ir.Absyn.BoolNot)
    {
       basil_ir.Absyn.BoolNot _boolnot = (basil_ir.Absyn.BoolNot) foo;
       render("(");
       render("BoolNot");
       sh(_boolnot.logexpr_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.IntRVar foo)
  {
    if (foo instanceof basil_ir.Absyn.IRV)
    {
       basil_ir.Absyn.IRV _irv = (basil_ir.Absyn.IRV) foo;
       render("(");
       render("IRV");
       sh(_irv.bident_);
       sh(_irv.inttype_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.BVRVar foo)
  {
    if (foo instanceof basil_ir.Absyn.BVRV)
    {
       basil_ir.Absyn.BVRV _bvrv = (basil_ir.Absyn.BVRV) foo;
       render("(");
       render("BVRV");
       sh(_bvrv.bident_);
       sh(_bvrv.bvtype_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.BoolRVar foo)
  {
    if (foo instanceof basil_ir.Absyn.BRV)
    {
       basil_ir.Absyn.BRV _brv = (basil_ir.Absyn.BRV) foo;
       render("(");
       render("BRV");
       sh(_brv.bident_);
       sh(_brv.booltype_);
       render(")");
    }
  }

  private static void sh(basil_ir.Absyn.BoolLiteral foo)
  {
    if (foo instanceof basil_ir.Absyn.BoolLiteral_true)
    {
       basil_ir.Absyn.BoolLiteral_true _boolliteral_true = (basil_ir.Absyn.BoolLiteral_true) foo;
       render("BoolLiteral_true");
    }
    if (foo instanceof basil_ir.Absyn.BoolLiteral_false)
    {
       basil_ir.Absyn.BoolLiteral_false _boolliteral_false = (basil_ir.Absyn.BoolLiteral_false) foo;
       render("BoolLiteral_false");
    }
  }

  private static void sh(basil_ir.Absyn.BVUnOp foo)
  {
    if (foo instanceof basil_ir.Absyn.BVUnOp_bvnot)
    {
       basil_ir.Absyn.BVUnOp_bvnot _bvunop_bvnot = (basil_ir.Absyn.BVUnOp_bvnot) foo;
       render("BVUnOp_bvnot");
    }
    if (foo instanceof basil_ir.Absyn.BVUnOp_bvneg)
    {
       basil_ir.Absyn.BVUnOp_bvneg _bvunop_bvneg = (basil_ir.Absyn.BVUnOp_bvneg) foo;
       render("BVUnOp_bvneg");
    }
  }

  private static void sh(basil_ir.Absyn.BVBinOp foo)
  {
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvand)
    {
       basil_ir.Absyn.BVBinOp_bvand _bvbinop_bvand = (basil_ir.Absyn.BVBinOp_bvand) foo;
       render("BVBinOp_bvand");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvor)
    {
       basil_ir.Absyn.BVBinOp_bvor _bvbinop_bvor = (basil_ir.Absyn.BVBinOp_bvor) foo;
       render("BVBinOp_bvor");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvadd)
    {
       basil_ir.Absyn.BVBinOp_bvadd _bvbinop_bvadd = (basil_ir.Absyn.BVBinOp_bvadd) foo;
       render("BVBinOp_bvadd");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvmul)
    {
       basil_ir.Absyn.BVBinOp_bvmul _bvbinop_bvmul = (basil_ir.Absyn.BVBinOp_bvmul) foo;
       render("BVBinOp_bvmul");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvudiv)
    {
       basil_ir.Absyn.BVBinOp_bvudiv _bvbinop_bvudiv = (basil_ir.Absyn.BVBinOp_bvudiv) foo;
       render("BVBinOp_bvudiv");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvurem)
    {
       basil_ir.Absyn.BVBinOp_bvurem _bvbinop_bvurem = (basil_ir.Absyn.BVBinOp_bvurem) foo;
       render("BVBinOp_bvurem");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvshl)
    {
       basil_ir.Absyn.BVBinOp_bvshl _bvbinop_bvshl = (basil_ir.Absyn.BVBinOp_bvshl) foo;
       render("BVBinOp_bvshl");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvlshr)
    {
       basil_ir.Absyn.BVBinOp_bvlshr _bvbinop_bvlshr = (basil_ir.Absyn.BVBinOp_bvlshr) foo;
       render("BVBinOp_bvlshr");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvnand)
    {
       basil_ir.Absyn.BVBinOp_bvnand _bvbinop_bvnand = (basil_ir.Absyn.BVBinOp_bvnand) foo;
       render("BVBinOp_bvnand");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvnor)
    {
       basil_ir.Absyn.BVBinOp_bvnor _bvbinop_bvnor = (basil_ir.Absyn.BVBinOp_bvnor) foo;
       render("BVBinOp_bvnor");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvxor)
    {
       basil_ir.Absyn.BVBinOp_bvxor _bvbinop_bvxor = (basil_ir.Absyn.BVBinOp_bvxor) foo;
       render("BVBinOp_bvxor");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvxnor)
    {
       basil_ir.Absyn.BVBinOp_bvxnor _bvbinop_bvxnor = (basil_ir.Absyn.BVBinOp_bvxnor) foo;
       render("BVBinOp_bvxnor");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvcomp)
    {
       basil_ir.Absyn.BVBinOp_bvcomp _bvbinop_bvcomp = (basil_ir.Absyn.BVBinOp_bvcomp) foo;
       render("BVBinOp_bvcomp");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvsub)
    {
       basil_ir.Absyn.BVBinOp_bvsub _bvbinop_bvsub = (basil_ir.Absyn.BVBinOp_bvsub) foo;
       render("BVBinOp_bvsub");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvsdiv)
    {
       basil_ir.Absyn.BVBinOp_bvsdiv _bvbinop_bvsdiv = (basil_ir.Absyn.BVBinOp_bvsdiv) foo;
       render("BVBinOp_bvsdiv");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvsrem)
    {
       basil_ir.Absyn.BVBinOp_bvsrem _bvbinop_bvsrem = (basil_ir.Absyn.BVBinOp_bvsrem) foo;
       render("BVBinOp_bvsrem");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvsmod)
    {
       basil_ir.Absyn.BVBinOp_bvsmod _bvbinop_bvsmod = (basil_ir.Absyn.BVBinOp_bvsmod) foo;
       render("BVBinOp_bvsmod");
    }
    if (foo instanceof basil_ir.Absyn.BVBinOp_bvashr)
    {
       basil_ir.Absyn.BVBinOp_bvashr _bvbinop_bvashr = (basil_ir.Absyn.BVBinOp_bvashr) foo;
       render("BVBinOp_bvashr");
    }
  }

  private static void sh(basil_ir.Absyn.BVLogicalBinOp foo)
  {
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvule)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvule _bvlogicalbinop_bvule = (basil_ir.Absyn.BVLogicalBinOp_bvule) foo;
       render("BVLogicalBinOp_bvule");
    }
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvugt)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvugt _bvlogicalbinop_bvugt = (basil_ir.Absyn.BVLogicalBinOp_bvugt) foo;
       render("BVLogicalBinOp_bvugt");
    }
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvuge)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvuge _bvlogicalbinop_bvuge = (basil_ir.Absyn.BVLogicalBinOp_bvuge) foo;
       render("BVLogicalBinOp_bvuge");
    }
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvslt)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvslt _bvlogicalbinop_bvslt = (basil_ir.Absyn.BVLogicalBinOp_bvslt) foo;
       render("BVLogicalBinOp_bvslt");
    }
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvsle)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvsle _bvlogicalbinop_bvsle = (basil_ir.Absyn.BVLogicalBinOp_bvsle) foo;
       render("BVLogicalBinOp_bvsle");
    }
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvsgt)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvsgt _bvlogicalbinop_bvsgt = (basil_ir.Absyn.BVLogicalBinOp_bvsgt) foo;
       render("BVLogicalBinOp_bvsgt");
    }
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvsge)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvsge _bvlogicalbinop_bvsge = (basil_ir.Absyn.BVLogicalBinOp_bvsge) foo;
       render("BVLogicalBinOp_bvsge");
    }
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bveq)
    {
       basil_ir.Absyn.BVLogicalBinOp_bveq _bvlogicalbinop_bveq = (basil_ir.Absyn.BVLogicalBinOp_bveq) foo;
       render("BVLogicalBinOp_bveq");
    }
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvneq)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvneq _bvlogicalbinop_bvneq = (basil_ir.Absyn.BVLogicalBinOp_bvneq) foo;
       render("BVLogicalBinOp_bvneq");
    }
    if (foo instanceof basil_ir.Absyn.BVLogicalBinOp_bvult)
    {
       basil_ir.Absyn.BVLogicalBinOp_bvult _bvlogicalbinop_bvult = (basil_ir.Absyn.BVLogicalBinOp_bvult) foo;
       render("BVLogicalBinOp_bvult");
    }
  }

  private static void sh(basil_ir.Absyn.IntBinOp foo)
  {
    if (foo instanceof basil_ir.Absyn.IntBinOp_intadd)
    {
       basil_ir.Absyn.IntBinOp_intadd _intbinop_intadd = (basil_ir.Absyn.IntBinOp_intadd) foo;
       render("IntBinOp_intadd");
    }
    if (foo instanceof basil_ir.Absyn.IntBinOp_intmul)
    {
       basil_ir.Absyn.IntBinOp_intmul _intbinop_intmul = (basil_ir.Absyn.IntBinOp_intmul) foo;
       render("IntBinOp_intmul");
    }
    if (foo instanceof basil_ir.Absyn.IntBinOp_intsub)
    {
       basil_ir.Absyn.IntBinOp_intsub _intbinop_intsub = (basil_ir.Absyn.IntBinOp_intsub) foo;
       render("IntBinOp_intsub");
    }
    if (foo instanceof basil_ir.Absyn.IntBinOp_intdiv)
    {
       basil_ir.Absyn.IntBinOp_intdiv _intbinop_intdiv = (basil_ir.Absyn.IntBinOp_intdiv) foo;
       render("IntBinOp_intdiv");
    }
    if (foo instanceof basil_ir.Absyn.IntBinOp_intmod)
    {
       basil_ir.Absyn.IntBinOp_intmod _intbinop_intmod = (basil_ir.Absyn.IntBinOp_intmod) foo;
       render("IntBinOp_intmod");
    }
  }

  private static void sh(basil_ir.Absyn.IntLogicalBinOp foo)
  {
    if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_inteq)
    {
       basil_ir.Absyn.IntLogicalBinOp_inteq _intlogicalbinop_inteq = (basil_ir.Absyn.IntLogicalBinOp_inteq) foo;
       render("IntLogicalBinOp_inteq");
    }
    if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intneq)
    {
       basil_ir.Absyn.IntLogicalBinOp_intneq _intlogicalbinop_intneq = (basil_ir.Absyn.IntLogicalBinOp_intneq) foo;
       render("IntLogicalBinOp_intneq");
    }
    if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intlt)
    {
       basil_ir.Absyn.IntLogicalBinOp_intlt _intlogicalbinop_intlt = (basil_ir.Absyn.IntLogicalBinOp_intlt) foo;
       render("IntLogicalBinOp_intlt");
    }
    if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intle)
    {
       basil_ir.Absyn.IntLogicalBinOp_intle _intlogicalbinop_intle = (basil_ir.Absyn.IntLogicalBinOp_intle) foo;
       render("IntLogicalBinOp_intle");
    }
    if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intgt)
    {
       basil_ir.Absyn.IntLogicalBinOp_intgt _intlogicalbinop_intgt = (basil_ir.Absyn.IntLogicalBinOp_intgt) foo;
       render("IntLogicalBinOp_intgt");
    }
    if (foo instanceof basil_ir.Absyn.IntLogicalBinOp_intge)
    {
       basil_ir.Absyn.IntLogicalBinOp_intge _intlogicalbinop_intge = (basil_ir.Absyn.IntLogicalBinOp_intge) foo;
       render("IntLogicalBinOp_intge");
    }
  }

  private static void sh(basil_ir.Absyn.BoolBinOp foo)
  {
    if (foo instanceof basil_ir.Absyn.BoolBinOp_booleq)
    {
       basil_ir.Absyn.BoolBinOp_booleq _boolbinop_booleq = (basil_ir.Absyn.BoolBinOp_booleq) foo;
       render("BoolBinOp_booleq");
    }
    if (foo instanceof basil_ir.Absyn.BoolBinOp_boolneq)
    {
       basil_ir.Absyn.BoolBinOp_boolneq _boolbinop_boolneq = (basil_ir.Absyn.BoolBinOp_boolneq) foo;
       render("BoolBinOp_boolneq");
    }
    if (foo instanceof basil_ir.Absyn.BoolBinOp_booland)
    {
       basil_ir.Absyn.BoolBinOp_booland _boolbinop_booland = (basil_ir.Absyn.BoolBinOp_booland) foo;
       render("BoolBinOp_booland");
    }
    if (foo instanceof basil_ir.Absyn.BoolBinOp_boolor)
    {
       basil_ir.Absyn.BoolBinOp_boolor _boolbinop_boolor = (basil_ir.Absyn.BoolBinOp_boolor) foo;
       render("BoolBinOp_boolor");
    }
    if (foo instanceof basil_ir.Absyn.BoolBinOp_boolimplies)
    {
       basil_ir.Absyn.BoolBinOp_boolimplies _boolbinop_boolimplies = (basil_ir.Absyn.BoolBinOp_boolimplies) foo;
       render("BoolBinOp_boolimplies");
    }
    if (foo instanceof basil_ir.Absyn.BoolBinOp_boolequiv)
    {
       basil_ir.Absyn.BoolBinOp_boolequiv _boolbinop_boolequiv = (basil_ir.Absyn.BoolBinOp_boolequiv) foo;
       render("BoolBinOp_boolequiv");
    }
  }


  private static void pp(Integer n, int _i_) { buf_.append(n); buf_.append(" "); }
  private static void pp(Double d, int _i_) { buf_.append(String.format(java.util.Locale.ROOT, "%.15g ", d)); }
  private static void pp(String s, int _i_) { buf_.append(s); buf_.append(" "); }
  private static void pp(Character c, int _i_) { buf_.append("'" + escape(c.toString()) + "'"); buf_.append(" "); }
  private static void sh(Integer n) { render(n.toString()); }
  private static void sh(Double d) { render(String.format(java.util.Locale.ROOT, "%.15g", d)); }
  private static void sh(Character c) { render("'" + escape(c.toString()) + "'"); }
  private static void sh(String s) { printQuoted(s); }

  private static void printQuoted(String s) { render("\"" + escape(s) + "\""); }

  public static String escape(String s) {
    if (s == null) return null;
    return s.replace("\\", "\\\\")
            .replace("\t", "\\t")
            .replace("\b", "\\b")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\f", "\\f")
            .replace("\"", "\\\"");
  }

  private static void indent()
  {
    int n = _n_;
    while (n > 0)
    {
      buf_.append(' ');
      n--;
    }
  }

  private static void backup()
  {
    int prev = buf_.length() - 1;
    if (prev >= 0 && buf_.charAt(prev) == ' ')
      buf_.setLength(prev);
  }

  private static void trim()
  {
    // Trim initial spaces
    int end = 0;
    int len = buf_.length();
    while (end < len && buf_.charAt(end) == ' ')
      end++;
    buf_.delete(0, end);
    // Trim trailing spaces
    removeTrailingSpaces();
  }

  private static void removeTrailingSpaces()
  {
    int end = buf_.length();
    while (end > 0 && buf_.charAt(end-1) == ' ')
      end--;
    buf_.setLength(end);
  }

  private static void removeTrailingWhitespace()
  {
    int end = buf_.length();
    while (end > 0 && (buf_.charAt(end-1) == ' ' || buf_.charAt(end-1) == '\n'))
      end--;
    buf_.setLength(end);
  }

  private static void onEmptyLine()
  {
    removeTrailingSpaces();
    int len = buf_.length();
    if (len > 0 && buf_.charAt(len-1) != '\n') buf_.append("\n");
    indent();
  }

  private static int _n_ = 0;
  private static StringBuilder buf_ = new StringBuilder(INITIAL_BUFFER_SIZE);
}


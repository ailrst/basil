// File generated by the BNF Converter (bnfc 2.9.5).

package basil_ir;

/*** Visitor Design Pattern Skeleton. ***/

/* This implements the common visitor design pattern.
   Tests show it to be slightly less efficient than the
   instanceof method, but easier to use.
   Replace the R and A parameters with the desired return
   and context types.*/

public class VisitSkel
{
  public class ProgramVisitor<R,A> implements basil_ir.Absyn.Program.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.Prog p, A arg)
    { /* Code for Prog goes here */
      for (basil_ir.Absyn.Declaration x: p.listdeclaration_) {
        x.accept(new DeclarationVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class DeclarationVisitor<R,A> implements basil_ir.Absyn.Declaration.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.LetDecl p, A arg)
    { /* Code for LetDecl goes here */
      //p.bident_;
      p.mexpr_.accept(new MExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.MemDecl p, A arg)
    { /* Code for MemDecl goes here */
      //p.bident_;
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.VarDecl p, A arg)
    { /* Code for VarDecl goes here */
      //p.bident_;
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.Procedure p, A arg)
    { /* Code for Procedure goes here */
      //p.bident_;
      for (basil_ir.Absyn.Params x: p.listparams_1) {
        x.accept(new ParamsVisitor<R,A>(), arg);
      }
      for (basil_ir.Absyn.Params x: p.listparams_2) {
        x.accept(new ParamsVisitor<R,A>(), arg);
      }
      p.procdef_.accept(new ProcDefVisitor<R,A>(), arg);
      return null;
    }
  }
  public class MExprVisitor<R,A> implements basil_ir.Absyn.MExpr.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.MSym p, A arg)
    { /* Code for MSym goes here */
      //p.bident_;
      return null;
    }
    public R visit(basil_ir.Absyn.BlockM p, A arg)
    { /* Code for BlockM goes here */
      p.block_.accept(new BlockVisitor<R,A>(), arg);
      return null;
    }
  }
  public class IntTypeVisitor<R,A> implements basil_ir.Absyn.IntType.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.IntT p, A arg)
    { /* Code for IntT goes here */
      return null;
    }
  }
  public class BoolTypeVisitor<R,A> implements basil_ir.Absyn.BoolType.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BoolT p, A arg)
    { /* Code for BoolT goes here */
      return null;
    }
  }
  public class MapTypeVisitor<R,A> implements basil_ir.Absyn.MapType.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.MapT p, A arg)
    { /* Code for MapT goes here */
      p.type_1.accept(new TypeVisitor<R,A>(), arg);
      p.type_2.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class BVTypeVisitor<R,A> implements basil_ir.Absyn.BVType.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.ShortBVT p, A arg)
    { /* Code for ShortBVT goes here */
      //p.bvtype_;
      return null;
    }
    public R visit(basil_ir.Absyn.BitvectorType p, A arg)
    { /* Code for BitvectorType goes here */
      p.intlit_.accept(new IntLitVisitor<R,A>(), arg);
      return null;
    }
  }
  public class TypeVisitor<R,A> implements basil_ir.Absyn.Type.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.TypeIntType p, A arg)
    { /* Code for TypeIntType goes here */
      p.inttype_.accept(new IntTypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.TypeBoolType p, A arg)
    { /* Code for TypeBoolType goes here */
      p.booltype_.accept(new BoolTypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.TypeMapType p, A arg)
    { /* Code for TypeMapType goes here */
      p.maptype_.accept(new MapTypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.TypeBVType p, A arg)
    { /* Code for TypeBVType goes here */
      p.bvtype_.accept(new BVTypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class IntLitVisitor<R,A> implements basil_ir.Absyn.IntLit.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.HexInt p, A arg)
    { /* Code for HexInt goes here */
      //p.integerhex_;
      return null;
    }
    public R visit(basil_ir.Absyn.DecInt p, A arg)
    { /* Code for DecInt goes here */
      //p.integer_;
      return null;
    }
  }
  public class AddrAttrVisitor<R,A> implements basil_ir.Absyn.AddrAttr.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.AddrAttrSome p, A arg)
    { /* Code for AddrAttrSome goes here */
      p.intlit_.accept(new IntLitVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.AddrAttrNone p, A arg)
    { /* Code for AddrAttrNone goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.AddrAttrEmpty p, A arg)
    { /* Code for AddrAttrEmpty goes here */
      return null;
    }
  }
  public class EndianVisitor<R,A> implements basil_ir.Absyn.Endian.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.LittleEndian p, A arg)
    { /* Code for LittleEndian goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BigEndian p, A arg)
    { /* Code for BigEndian goes here */
      return null;
    }
  }
  public class StatementVisitor<R,A> implements basil_ir.Absyn.Statement.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.AssignStmt p, A arg)
    { /* Code for AssignStmt goes here */
      p.assign_.accept(new AssignVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.SLoad p, A arg)
    { /* Code for SLoad goes here */
      p.bvlvar_.accept(new BVLVarVisitor<R,A>(), arg);
      p.endian_.accept(new EndianVisitor<R,A>(), arg);
      //p.bident_;
      p.bvexpr_.accept(new BVExprVisitor<R,A>(), arg);
      p.intlit_.accept(new IntLitVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.SStore p, A arg)
    { /* Code for SStore goes here */
      p.endian_.accept(new EndianVisitor<R,A>(), arg);
      //p.bident_;
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      p.bvexpr_.accept(new BVExprVisitor<R,A>(), arg);
      p.intlit_.accept(new IntLitVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.DirectCall p, A arg)
    { /* Code for DirectCall goes here */
      //p.bident_;
      for (basil_ir.Absyn.Expr x: p.listexpr_) {
        x.accept(new ExprVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(basil_ir.Absyn.DirectCallReturnLocal p, A arg)
    { /* Code for DirectCallReturnLocal goes here */
      for (basil_ir.Absyn.LVar x: p.listlvar_) {
        x.accept(new LVarVisitor<R,A>(), arg);
      }
      //p.bident_;
      for (basil_ir.Absyn.Expr x: p.listexpr_) {
        x.accept(new ExprVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(basil_ir.Absyn.DirectCallReturn p, A arg)
    { /* Code for DirectCallReturn goes here */
      for (basil_ir.Absyn.LVar x: p.listlvar_) {
        x.accept(new LVarVisitor<R,A>(), arg);
      }
      //p.bident_;
      for (basil_ir.Absyn.Expr x: p.listexpr_) {
        x.accept(new ExprVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(basil_ir.Absyn.IndirectCall p, A arg)
    { /* Code for IndirectCall goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.Assume p, A arg)
    { /* Code for Assume goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.Assert p, A arg)
    { /* Code for Assert goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class AssignVisitor<R,A> implements basil_ir.Absyn.Assign.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.IntAssign p, A arg)
    { /* Code for IntAssign goes here */
      p.intlvar_.accept(new IntLVarVisitor<R,A>(), arg);
      p.intexpr_.accept(new IntExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.BVAssign p, A arg)
    { /* Code for BVAssign goes here */
      p.bvlvar_.accept(new BVLVarVisitor<R,A>(), arg);
      p.bvexpr_.accept(new BVExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.BoolAssign p, A arg)
    { /* Code for BoolAssign goes here */
      p.boollvar_.accept(new BoolLVarVisitor<R,A>(), arg);
      p.logexpr_.accept(new LogExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class JumpVisitor<R,A> implements basil_ir.Absyn.Jump.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.GoTo p, A arg)
    { /* Code for GoTo goes here */
      for (String x: p.listbident_) {
        //x;
      }
      return null;
    }
    public R visit(basil_ir.Absyn.Unreachable p, A arg)
    { /* Code for Unreachable goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.Return p, A arg)
    { /* Code for Return goes here */
      for (basil_ir.Absyn.Expr x: p.listexpr_) {
        x.accept(new ExprVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class LVarVisitor<R,A> implements basil_ir.Absyn.LVar.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.LVarIntLVar p, A arg)
    { /* Code for LVarIntLVar goes here */
      p.intlvar_.accept(new IntLVarVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.LVarBVLVar p, A arg)
    { /* Code for LVarBVLVar goes here */
      p.bvlvar_.accept(new BVLVarVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.LVarBoolLVar p, A arg)
    { /* Code for LVarBoolLVar goes here */
      p.boollvar_.accept(new BoolLVarVisitor<R,A>(), arg);
      return null;
    }
  }
  public class BVLVarVisitor<R,A> implements basil_ir.Absyn.BVLVar.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.LocalBVLVar p, A arg)
    { /* Code for LocalBVLVar goes here */
      //p.bident_;
      p.bvtype_.accept(new BVTypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.GlobalBVLVar p, A arg)
    { /* Code for GlobalBVLVar goes here */
      //p.bident_;
      p.bvtype_.accept(new BVTypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class IntLVarVisitor<R,A> implements basil_ir.Absyn.IntLVar.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.LocalIntLVar p, A arg)
    { /* Code for LocalIntLVar goes here */
      //p.bident_;
      p.inttype_.accept(new IntTypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.GlobalIntLVar p, A arg)
    { /* Code for GlobalIntLVar goes here */
      //p.bident_;
      p.inttype_.accept(new IntTypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class BoolLVarVisitor<R,A> implements basil_ir.Absyn.BoolLVar.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.LocalBoolLVar p, A arg)
    { /* Code for LocalBoolLVar goes here */
      //p.bident_;
      p.booltype_.accept(new BoolTypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.GlobalBoolLVar p, A arg)
    { /* Code for GlobalBoolLVar goes here */
      //p.bident_;
      p.booltype_.accept(new BoolTypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class BlockVisitor<R,A> implements basil_ir.Absyn.Block.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.B p, A arg)
    { /* Code for B goes here */
      //p.bident_;
      p.addrattr_.accept(new AddrAttrVisitor<R,A>(), arg);
      for (basil_ir.Absyn.Statement x: p.liststatement_) {
        x.accept(new StatementVisitor<R,A>(), arg);
      }
      p.jump_.accept(new JumpVisitor<R,A>(), arg);
      return null;
    }
  }
  public class PEntryVisitor<R,A> implements basil_ir.Absyn.PEntry.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.EntrySome p, A arg)
    { /* Code for EntrySome goes here */
      p.block_.accept(new BlockVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.EntryNone p, A arg)
    { /* Code for EntryNone goes here */
      return null;
    }
  }
  public class PExitVisitor<R,A> implements basil_ir.Absyn.PExit.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.ESome p, A arg)
    { /* Code for ESome goes here */
      p.block_.accept(new BlockVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.ENone p, A arg)
    { /* Code for ENone goes here */
      return null;
    }
  }
  public class PAddressVisitor<R,A> implements basil_ir.Absyn.PAddress.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.AddrSome p, A arg)
    { /* Code for AddrSome goes here */
      p.intlit_.accept(new IntLitVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.AddrNone p, A arg)
    { /* Code for AddrNone goes here */
      return null;
    }
  }
  public class InternalBlocksVisitor<R,A> implements basil_ir.Absyn.InternalBlocks.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BSome p, A arg)
    { /* Code for BSome goes here */
      for (basil_ir.Absyn.Block x: p.listblock_) {
        x.accept(new BlockVisitor<R,A>(), arg);
      }
      return null;
    }
    public R visit(basil_ir.Absyn.BNone p, A arg)
    { /* Code for BNone goes here */
      return null;
    }
  }
  public class ProcDefVisitor<R,A> implements basil_ir.Absyn.ProcDef.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.PD p, A arg)
    { /* Code for PD goes here */
      //p.str_;
      p.paddress_.accept(new PAddressVisitor<R,A>(), arg);
      p.pentry_.accept(new PEntryVisitor<R,A>(), arg);
      p.pexit_.accept(new PExitVisitor<R,A>(), arg);
      p.internalblocks_.accept(new InternalBlocksVisitor<R,A>(), arg);
      return null;
    }
  }
  public class ParamsVisitor<R,A> implements basil_ir.Absyn.Params.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.Param p, A arg)
    { /* Code for Param goes here */
      //p.bident_;
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class ExprVisitor<R,A> implements basil_ir.Absyn.Expr.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BitvectorExpr p, A arg)
    { /* Code for BitvectorExpr goes here */
      p.bvexpr_.accept(new BVExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.LogicalExpr p, A arg)
    { /* Code for LogicalExpr goes here */
      p.logexpr_.accept(new LogExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.IntegerExpr p, A arg)
    { /* Code for IntegerExpr goes here */
      p.intexpr_.accept(new IntExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class BVExprVisitor<R,A> implements basil_ir.Absyn.BVExpr.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BVBinary p, A arg)
    { /* Code for BVBinary goes here */
      p.bvbinop_.accept(new BVBinOpVisitor<R,A>(), arg);
      p.bvexpr_1.accept(new BVExprVisitor<R,A>(), arg);
      p.bvexpr_2.accept(new BVExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.BVUnary p, A arg)
    { /* Code for BVUnary goes here */
      p.bvunop_.accept(new BVUnOpVisitor<R,A>(), arg);
      p.bvexpr_.accept(new BVExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.ZeroExtend p, A arg)
    { /* Code for ZeroExtend goes here */
      p.intlit_.accept(new IntLitVisitor<R,A>(), arg);
      p.bvexpr_.accept(new BVExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.SignExtend p, A arg)
    { /* Code for SignExtend goes here */
      p.intlit_.accept(new IntLitVisitor<R,A>(), arg);
      p.bvexpr_.accept(new BVExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.Extract p, A arg)
    { /* Code for Extract goes here */
      p.intlit_1.accept(new IntLitVisitor<R,A>(), arg);
      p.intlit_2.accept(new IntLitVisitor<R,A>(), arg);
      p.bvexpr_.accept(new BVExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.Concat p, A arg)
    { /* Code for Concat goes here */
      p.bvexpr_1.accept(new BVExprVisitor<R,A>(), arg);
      p.bvexpr_2.accept(new BVExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.BVLiteral p, A arg)
    { /* Code for BVLiteral goes here */
      p.intlit_.accept(new IntLitVisitor<R,A>(), arg);
      p.bvtype_.accept(new BVTypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.RBVVar p, A arg)
    { /* Code for RBVVar goes here */
      p.bvrvar_.accept(new BVRVarVisitor<R,A>(), arg);
      return null;
    }
  }
  public class IntExprVisitor<R,A> implements basil_ir.Absyn.IntExpr.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.IntLiteral p, A arg)
    { /* Code for IntLiteral goes here */
      p.intlit_.accept(new IntLitVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.RIntVar p, A arg)
    { /* Code for RIntVar goes here */
      p.intrvar_.accept(new IntRVarVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.IntBinary p, A arg)
    { /* Code for IntBinary goes here */
      p.intbinop_.accept(new IntBinOpVisitor<R,A>(), arg);
      p.intexpr_1.accept(new IntExprVisitor<R,A>(), arg);
      p.intexpr_2.accept(new IntExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.IntNeg p, A arg)
    { /* Code for IntNeg goes here */
      p.intexpr_.accept(new IntExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class LogExprVisitor<R,A> implements basil_ir.Absyn.LogExpr.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BVLogBinary p, A arg)
    { /* Code for BVLogBinary goes here */
      p.bvlogicalbinop_.accept(new BVLogicalBinOpVisitor<R,A>(), arg);
      p.bvexpr_1.accept(new BVExprVisitor<R,A>(), arg);
      p.bvexpr_2.accept(new BVExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.RLogVar p, A arg)
    { /* Code for RLogVar goes here */
      p.boolrvar_.accept(new BoolRVarVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.BoolLit p, A arg)
    { /* Code for BoolLit goes here */
      p.boolliteral_.accept(new BoolLiteralVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.IntLogBinary p, A arg)
    { /* Code for IntLogBinary goes here */
      p.intlogicalbinop_.accept(new IntLogicalBinOpVisitor<R,A>(), arg);
      p.intexpr_1.accept(new IntExprVisitor<R,A>(), arg);
      p.intexpr_2.accept(new IntExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.BoolLogBinOp p, A arg)
    { /* Code for BoolLogBinOp goes here */
      p.boolbinop_.accept(new BoolBinOpVisitor<R,A>(), arg);
      p.logexpr_1.accept(new LogExprVisitor<R,A>(), arg);
      p.logexpr_2.accept(new LogExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(basil_ir.Absyn.BoolNot p, A arg)
    { /* Code for BoolNot goes here */
      p.logexpr_.accept(new LogExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class IntRVarVisitor<R,A> implements basil_ir.Absyn.IntRVar.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.IRV p, A arg)
    { /* Code for IRV goes here */
      //p.bident_;
      p.inttype_.accept(new IntTypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class BVRVarVisitor<R,A> implements basil_ir.Absyn.BVRVar.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BVRV p, A arg)
    { /* Code for BVRV goes here */
      //p.bident_;
      p.bvtype_.accept(new BVTypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class BoolRVarVisitor<R,A> implements basil_ir.Absyn.BoolRVar.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BRV p, A arg)
    { /* Code for BRV goes here */
      //p.bident_;
      p.booltype_.accept(new BoolTypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class BoolLiteralVisitor<R,A> implements basil_ir.Absyn.BoolLiteral.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BoolLiteral_true p, A arg)
    { /* Code for BoolLiteral_true goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BoolLiteral_false p, A arg)
    { /* Code for BoolLiteral_false goes here */
      return null;
    }
  }
  public class BVUnOpVisitor<R,A> implements basil_ir.Absyn.BVUnOp.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BVUnOp_bvnot p, A arg)
    { /* Code for BVUnOp_bvnot goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVUnOp_bvneg p, A arg)
    { /* Code for BVUnOp_bvneg goes here */
      return null;
    }
  }
  public class BVBinOpVisitor<R,A> implements basil_ir.Absyn.BVBinOp.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BVBinOp_bvand p, A arg)
    { /* Code for BVBinOp_bvand goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvor p, A arg)
    { /* Code for BVBinOp_bvor goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvadd p, A arg)
    { /* Code for BVBinOp_bvadd goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvmul p, A arg)
    { /* Code for BVBinOp_bvmul goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvudiv p, A arg)
    { /* Code for BVBinOp_bvudiv goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvurem p, A arg)
    { /* Code for BVBinOp_bvurem goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvshl p, A arg)
    { /* Code for BVBinOp_bvshl goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvlshr p, A arg)
    { /* Code for BVBinOp_bvlshr goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvnand p, A arg)
    { /* Code for BVBinOp_bvnand goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvnor p, A arg)
    { /* Code for BVBinOp_bvnor goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvxor p, A arg)
    { /* Code for BVBinOp_bvxor goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvxnor p, A arg)
    { /* Code for BVBinOp_bvxnor goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvcomp p, A arg)
    { /* Code for BVBinOp_bvcomp goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvsub p, A arg)
    { /* Code for BVBinOp_bvsub goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvsdiv p, A arg)
    { /* Code for BVBinOp_bvsdiv goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvsrem p, A arg)
    { /* Code for BVBinOp_bvsrem goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvsmod p, A arg)
    { /* Code for BVBinOp_bvsmod goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVBinOp_bvashr p, A arg)
    { /* Code for BVBinOp_bvashr goes here */
      return null;
    }
  }
  public class BVLogicalBinOpVisitor<R,A> implements basil_ir.Absyn.BVLogicalBinOp.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvule p, A arg)
    { /* Code for BVLogicalBinOp_bvule goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvugt p, A arg)
    { /* Code for BVLogicalBinOp_bvugt goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvuge p, A arg)
    { /* Code for BVLogicalBinOp_bvuge goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvslt p, A arg)
    { /* Code for BVLogicalBinOp_bvslt goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvsle p, A arg)
    { /* Code for BVLogicalBinOp_bvsle goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvsgt p, A arg)
    { /* Code for BVLogicalBinOp_bvsgt goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvsge p, A arg)
    { /* Code for BVLogicalBinOp_bvsge goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bveq p, A arg)
    { /* Code for BVLogicalBinOp_bveq goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvneq p, A arg)
    { /* Code for BVLogicalBinOp_bvneq goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BVLogicalBinOp_bvult p, A arg)
    { /* Code for BVLogicalBinOp_bvult goes here */
      return null;
    }
  }
  public class IntBinOpVisitor<R,A> implements basil_ir.Absyn.IntBinOp.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.IntBinOp_intadd p, A arg)
    { /* Code for IntBinOp_intadd goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.IntBinOp_intmul p, A arg)
    { /* Code for IntBinOp_intmul goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.IntBinOp_intsub p, A arg)
    { /* Code for IntBinOp_intsub goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.IntBinOp_intdiv p, A arg)
    { /* Code for IntBinOp_intdiv goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.IntBinOp_intmod p, A arg)
    { /* Code for IntBinOp_intmod goes here */
      return null;
    }
  }
  public class IntLogicalBinOpVisitor<R,A> implements basil_ir.Absyn.IntLogicalBinOp.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.IntLogicalBinOp_inteq p, A arg)
    { /* Code for IntLogicalBinOp_inteq goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intneq p, A arg)
    { /* Code for IntLogicalBinOp_intneq goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intlt p, A arg)
    { /* Code for IntLogicalBinOp_intlt goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intle p, A arg)
    { /* Code for IntLogicalBinOp_intle goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intgt p, A arg)
    { /* Code for IntLogicalBinOp_intgt goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.IntLogicalBinOp_intge p, A arg)
    { /* Code for IntLogicalBinOp_intge goes here */
      return null;
    }
  }
  public class BoolBinOpVisitor<R,A> implements basil_ir.Absyn.BoolBinOp.Visitor<R,A>
  {
    public R visit(basil_ir.Absyn.BoolBinOp_booleq p, A arg)
    { /* Code for BoolBinOp_booleq goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_boolneq p, A arg)
    { /* Code for BoolBinOp_boolneq goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_booland p, A arg)
    { /* Code for BoolBinOp_booland goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_boolor p, A arg)
    { /* Code for BoolBinOp_boolor goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_boolimplies p, A arg)
    { /* Code for BoolBinOp_boolimplies goes here */
      return null;
    }
    public R visit(basil_ir.Absyn.BoolBinOp_boolequiv p, A arg)
    { /* Code for BoolBinOp_boolequiv goes here */
      return null;
    }
  }
}
